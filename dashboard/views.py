# dashboard/views.py
import base64
import os
import shutil
import tempfile
from textwrap import wrap
from django.conf import settings
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.contrib.auth.decorators import login_required , user_passes_test
from django.db.models import Sum, Count, Avg
from django.http import HttpResponse
from django.db import transaction # Pour g√©rer les transactions de base de donn√©es
from django.forms import ValidationError, modelformset_factory # Pour g√©rer plusieurs formulaires d'un m√™me mod√®le
from django.forms import formset_factory
from django.utils import timezone
# Pour la g√©n√©ration de PDF
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.platypus import Table, TableStyle, Paragraph
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import inch
from datetime import datetime, timedelta
from datetime import date
from reportlab.lib.units import inch
from django.core.files.base import ContentFile
import io
import os # Pour extraire le nom de base du fichier d'asset
import qrcode
from weasyprint import HTML
from wkhtmltopdf.views import PDFTemplateResponse
from django.template.loader import render_to_string
import pdfkit  
from django_pdfkit import PDFView

from reportlab.lib.pagesizes import A5
from reportlab.lib.utils import ImageReader
from reportlab.lib.colors import HexColor, black
from django.db.models import Avg, Min, Max
import csv
import openpyxl

# Importation de ReportLab
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.platypus import Table, TableStyle
from reportlab.lib.utils import ImageReader



from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import Table, TableStyle

# Importez tous vos formulaires
from .forms import (
    CertificatFrequentationForm, EcoleSettingsForm, EmploiDuTempsForm, EtudiantForm, DossierInscriptionImageForm, NoteForm, PaiementForm, PresenceForm,
    EnseignantForm, MatiereForm, ClasseForm, ProgrammeMatiereForm, AnneeScolaireForm
)

# Importez tous vos mod√®les
from .models import (
    EcoleSettings, EmploiDuTemps, Etudiant, AnneeScolaire, Enseignant, Classe, Matiere, ProgrammeMatiere,
    Note, Paiement, Presence, DossierInscriptionImage, CertificatFrequentation , Profile
)

from django.db.models import Q  # Pour les recherches complexes

# ------------------------------------------------------------------
# UTILITAIRE : r√©cup√©rer l'√©cole de l'utilisateur connect√©
# ------------------------------------------------------------------



@login_required
def initier_paiement(request):
    """
    Vue simulant un paiement pour l'√©cole associ√©e √† l'utilisateur.
    """
    ecole = getattr(request.user.profile, 'ecole', None)

    if not ecole:
        messages.error(request, "Aucune √©cole associ√©e √† votre compte.")
        return redirect('dashboard_accueil')

    # Si l'√©cole est d√©j√† active, inutile de payer √† nouveau
    if ecole.est_active and not ecole.periode_essai_expiree():
        messages.info(request, "Votre abonnement est d√©j√† actif.")
        return redirect('dashboard_accueil')

    if request.method == "POST":
        # Simuler la r√©ussite du paiement (√† remplacer par l‚ÄôAPI r√©elle)
        ecole.est_active = True
        ecole.date_fin_essai = timezone.now() + timedelta(days=30)  # 1 mois d‚Äôabonnement
        ecole.save()

        messages.success(request, "Paiement effectu√© avec succ√®s ! Votre abonnement a √©t√© renouvel√©.")
        return redirect('dashboard_accueil')

    context = {
        'ecole': ecole,
        'montant': 25000,  # Exemple : 5000 FCFA / mois
    }
    return render(request, 'dashboard/paiements/initier_paiement.html', context)




def get_user_ecole(request):
    """Retourne l'√©cole associ√©e au profil utilisateur connect√©."""
    if hasattr(request.user, 'profile') and request.user.profile.ecole:
        return request.user.profile.ecole
    return None


# ------------------------------------------------------------------
# RECHERCHE D'√âTUDIANTS PAR √âCOLE
# ------------------------------------------------------------------
@login_required
def recherche_etudiants(request):
    query = request.GET.get('q', '').strip()
    ecole = get_user_ecole(request)
    resultats = []

    if not ecole:
        messages.warning(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    if query:
        resultats = (
            Etudiant.objects.filter(ecole=ecole)
            .filter(
                Q(nom__icontains=query)
                | Q(prenom__icontains=query)
                | Q(numero_matricule__icontains=query)
                | Q(classe__nom_classe__icontains=query)
            )
            .select_related('classe', 'annee_scolaire_inscription')
        )

    context = {
        'query': query,
        'resultats': resultats,
    }
    return render(request, 'dashboard/etudiants/recherche_etudiants.html', context)


# ------------------------------------------------------------------
# TABLEAU DE BORD ACCUEIL (MULTI-√âCOLE)
# ------------------------------------------------------------------
@login_required
def dashboard_accueil(request):
    ecole = get_user_ecole(request)

    # üîí V√©rifie que l'utilisateur est li√© √† une √©cole
    if not ecole:
        messages.warning(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('choisir_ecole')  # ou une vue pour s√©lectionner/cr√©er une √©cole

    # üè´ Ann√©e scolaire active pour CETTE √©cole uniquement
    annee_active = AnneeScolaire.objects.filter(ecole=ecole, active=True).first()

    if not annee_active:
        messages.warning(request, f"Aucune ann√©e scolaire active n'est d√©finie pour l'√©cole {ecole.nom_etablissement}.")
        return redirect('liste_annees_scolaires')

    # üí∞ √âl√®ves avec paiements impay√©s ou partiels
    eleves_non_payes_compte = (
        Paiement.objects.filter(
            annee_scolaire=annee_active,
            ecole=ecole,
            statut__in=['Impay√©', 'Partiel']
        )
        .values('etudiant')
        .annotate(total_du_par_etudiant=Sum('montant_du'))
        .count()
    )

    # üö´ Absents aujourd'hui
    absents_aujourd_hui = Presence.objects.filter(
        date=timezone.now().date(),
        annee_scolaire=annee_active,
        ecole=ecole,
        statut='Absent'
    ).count()

    # ‚úÖ Total pay√©
    total_paye = (
        Paiement.objects.filter(
            annee_scolaire=annee_active,
            ecole=ecole,
            statut__in=['Pay√©', 'Partiel']
        ).aggregate(total_paid=Sum('montant'))['total_paid']
        or 0
    )

    # ‚ùå Total impay√©
    total_impaye = (
        Paiement.objects.filter(
            annee_scolaire=annee_active,
            ecole=ecole,
            statut__in=['Impay√©', 'Partiel']
        ).aggregate(total_due=Sum('montant_du'))['total_due']
        or 0
    )

    # üßë‚Äçüéì 3 √©l√®ves r√©cemment inscrits
    etudiants_recents = (
        Etudiant.objects.filter(
            ecole=ecole,
            annee_scolaire_inscription=annee_active
        )
        .order_by('-date_inscription')[:3]
    )

    # üè´ Compter classes & enseignants
    classes_actives = Classe.objects.filter(annee_scolaire=annee_active, ecole=ecole).count()
    enseignants_actifs = ecole.enseignants.count()
 # relation inverse depuis mod√®le Enseignant

    context = {
        'annee_active': annee_active,
        'ecole_active': ecole,
        'eleves_non_payes_compte': eleves_non_payes_compte,
        'absents_aujourd_hui': absents_aujourd_hui,
        'total_paye': total_paye,
        'total_impaye': total_impaye,
        'etudiants_recents': etudiants_recents,
        'classes_actives': classes_actives,
        'enseignants_actifs': enseignants_actifs,
    }

    return render(request, 'dashboard/dashboard_accueil.html', context)

# ------------------------------------------------------------------
# LISTE √âTUDIANTS
# ------------------------------------------------------------------
@login_required
def liste_etudiants(request):
    ecole = get_user_ecole(request)
    etudiants = Etudiant.objects.filter(ecole=ecole).select_related('classe', 'annee_scolaire_inscription')
    toutes_les_classes = Classe.objects.filter(ecole=ecole).order_by('nom_classe')

    selected_classe_id = request.GET.get('classe')
    if selected_classe_id:
        try:
            selected_classe_id = int(selected_classe_id)
            etudiants = etudiants.filter(classe__id=selected_classe_id)
        except (ValueError, TypeError):
            messages.warning(request, "Le filtre de classe s√©lectionn√© n'est pas valide.")
            selected_classe_id = None

    etudiants = etudiants.order_by('classe__nom_classe', 'nom', 'prenom')

    context = {
        'etudiants': etudiants,
        'toutes_les_classes': toutes_les_classes,
        'selected_classe_id': selected_classe_id
    }
    return render(request, 'dashboard/etudiants/liste_etudiants.html', context)

# ------------------------------------------------------------------
# CR√âER √âTUDIANT
# ------------------------------------------------------------------
@login_required
def creer_etudiant(request):
    # R√©cup√©rer l'√©cole de l'utilisateur
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # Formset pour les images du dossier d'inscription
    DossierFormSet = modelformset_factory(
        DossierInscriptionImage,
        form=DossierInscriptionImageForm,
        extra=3,
        can_delete=True
    )

    # R√©cup√©rer l'ann√©e scolaire active pour cette √©cole
    annee_active = AnneeScolaire.objects.filter(active=True, ecole=ecole).first()

    if request.method == 'POST':
        form = EtudiantForm(
            request.POST,
            request.FILES,
            ecole=ecole,  # ‚ö° Passer l'√©cole pour filtrer classes et ann√©es
        )
        formset = DossierFormSet(
            request.POST,
            request.FILES,
            queryset=DossierInscriptionImage.objects.none()
        )

        if form.is_valid() and formset.is_valid():
            with transaction.atomic():
                # Cr√©er l'√©tudiant
                etudiant = form.save(commit=False)
                etudiant.ecole = ecole
                # Assigner l'ann√©e active si non fournie
                if not etudiant.annee_scolaire_inscription:
                    etudiant.annee_scolaire_inscription = annee_active
                etudiant.save()

                # Sauvegarde des images du dossier
                for f in formset:
                    if f.cleaned_data and not f.cleaned_data.get('DELETE'):
                        dossier_image = f.save(commit=False)
                        dossier_image.etudiant = etudiant
                        dossier_image.save()

                messages.success(
                    request,
                    f"L'√©l√®ve {etudiant.prenom} {etudiant.nom} a √©t√© ajout√© avec succ√®s."
                )
                return redirect('detail_etudiant', etudiant_id=etudiant.pk)
        else:
            messages.error(request, "Veuillez corriger les erreurs dans le formulaire.")
    else:
        form = EtudiantForm(
            ecole=ecole,
            initial={'annee_scolaire_inscription': annee_active}
        )
        formset = DossierFormSet(queryset=DossierInscriptionImage.objects.none())

    return render(
        request,
        'dashboard/etudiants/creer_etudiant.html',
        {'form': form, 'formset': formset, 'annee_active': annee_active}
    )


# ------------------------------------------------------------------
# D√âTAIL √âTUDIANT
# ------------------------------------------------------------------
@login_required
def detail_etudiant(request, etudiant_id):
    # R√©cup√©rer l'√©cole de l'utilisateur connect√©
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # √âtudiant filtr√© par √©cole
    etudiant = get_object_or_404(
        Etudiant.objects.select_related('classe', 'annee_scolaire_inscription'),
        pk=etudiant_id,
        ecole=ecole
    )

    # Ann√©e scolaire active pour cette √©cole
    annee_active = AnneeScolaire.objects.filter(active=True, ecole=ecole).first()

    # Dossier d'inscription
    dossier_images = etudiant.dossier_images.all()

    # Notes filtr√©es par √©cole et ann√©e active (ou tout l'historique si besoin)
    notes = etudiant.notes.filter(
        ecole=ecole,
        annee_scolaire=annee_active
    ).select_related('matiere', 'annee_scolaire').order_by('-annee_scolaire', 'periode_evaluation')

    # Paiements filtr√©s par √©cole
    paiements = etudiant.paiements.filter(
        ecole=ecole,
        annee_scolaire=annee_active
    ).select_related('annee_scolaire').order_by('-date_paiement')

    # Pr√©sences filtr√©es par √©cole et ann√©e active
    presences = etudiant.presences.filter(
        ecole=ecole,
        annee_scolaire=annee_active
    ).select_related('matiere', 'annee_scolaire').order_by('-date')

    # Calculs financiers
    total_paye = paiements.filter(statut__in=['Pay√©', 'Partiel']).aggregate(Sum('montant'))['montant__sum'] or 0
    total_du = paiements.aggregate(Sum('montant_du'))['montant_du__sum'] or 0
    solde_restant = total_du - total_paye

    # Statistiques de pr√©sence
    stats_presences = presences.values('statut').annotate(total=Count('id'))
    total_jours_presents = next((x['total'] for x in stats_presences if x['statut'] == 'Pr√©sent'), 0)
    total_jours_absents = next((x['total'] for x in stats_presences if x['statut'] == 'Absent'), 0)
    total_jours_retard = next((x['total'] for x in stats_presences if x['statut'] == 'Retard'), 0)
    total_jours_excuses = next((x['total'] for x in stats_presences if x['statut'] == 'Excus√©'), 0)

    context = {
        'etudiant': etudiant,
        'dossier_images': dossier_images,
        'notes': notes,
        'paiements': paiements,
        'presences': presences,
        'total_paye': total_paye,
        'total_du': total_du,
        'solde_restant': solde_restant,
        'total_jours_presents': total_jours_presents,
        'total_jours_absents': total_jours_absents,
        'total_jours_retard': total_jours_retard,
        'total_jours_excuses': total_jours_excuses,
        'annee_active': annee_active,
    }

    return render(request, 'dashboard/etudiants/detail_etudiant.html', context)




# ------------------------------------------------------------------
# MODIFIER √âTUDIANT
# ------------------------------------------------------------------
@login_required
def modifier_etudiant(request, etudiant_id):
    """
    Modifier un √©tudiant et ses dossiers d'inscription.
    Filtrage strict par l'√©cole de l'utilisateur.
    """
    # üîπ R√©cup√©ration de l'√©cole
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # üîπ R√©cup√©ration de l'√©tudiant li√© √† cette √©cole
    etudiant = get_object_or_404(Etudiant, pk=etudiant_id, ecole=ecole)

    # üîπ Formset pour g√©rer les images/dossiers
    DossierFormSet = modelformset_factory(
        DossierInscriptionImage,
        form=DossierInscriptionImageForm,
        extra=1,
        can_delete=True
    )

    if request.method == 'POST':
        # ‚ö° Important : passer l'√©cole au formulaire pour filtrer les classes et ann√©es
        form = EtudiantForm(request.POST, request.FILES, instance=etudiant, ecole=ecole)
        formset = DossierFormSet(
            request.POST,
            request.FILES,
            queryset=DossierInscriptionImage.objects.filter(etudiant=etudiant)
        )

        if form.is_valid() and formset.is_valid():
            with transaction.atomic():
                etudiant = form.save()
                
                for f in formset:
                    if f.cleaned_data:
                        if f.cleaned_data.get('DELETE') and f.instance.pk:
                            f.instance.delete()
                        else:
                            dossier_image = f.save(commit=False)
                            dossier_image.etudiant = etudiant
                            dossier_image.save()
                
                messages.success(request, f"Les informations de {etudiant.prenom} {etudiant.nom} ont √©t√© mises √† jour.")
                return redirect('detail_etudiant', etudiant_id=etudiant.pk)
        else:
            messages.error(request, "Veuillez corriger les erreurs dans le formulaire.")
    else:
        form = EtudiantForm(instance=etudiant, ecole=ecole)
        formset = DossierFormSet(queryset=DossierInscriptionImage.objects.filter(etudiant=etudiant))

    return render(request, 'dashboard/etudiants/modifier_etudiant.html', {
        'form': form,
        'formset': formset,
        'etudiant': etudiant
    })


@login_required
def supprimer_etudiant(request, etudiant_id):
    """
    Supprimer un √©tudiant (filtr√© par √©cole de l'utilisateur).
    """
    ecole = get_user_ecole(request)
    etudiant = get_object_or_404(Etudiant, pk=etudiant_id, ecole=ecole)

    if request.method == 'POST':
        nom_complet = f"{etudiant.prenom} {etudiant.nom}"
        etudiant.delete()
        messages.success(request, f"L'√©l√®ve {nom_complet} a √©t√© supprim√© avec succ√®s.")
        return redirect('liste_etudiants')

    return render(request, 'dashboard/etudiants/confirmer_suppression_etudiant.html', {
        'etudiant': etudiant
    })



# --- Vues pour les notes, paiements, pr√©sences (cr√©ation/modification li√©e √† un √©l√®ve) ---
# Vous pouvez les cr√©er comme des vues s√©par√©es ou des modales dans la page de d√©tail de l'√©l√®ve


@login_required
def ajouter_note(request, etudiant_id):
    """
    Ajouter une note pour un √©tudiant sp√©cifique, en respectant l'√©cole de l'utilisateur.
    Gestion de l'ann√©e scolaire active pour √©viter MultipleObjectsReturned.
    """

    # 1Ô∏è‚É£ R√©cup√©ration de l'√©cole de l'utilisateur via profil
    ecole = getattr(getattr(request.user, 'profile', None), 'ecole', None)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # 2Ô∏è‚É£ R√©cup√©ration de l'√©tudiant et v√©rification qu'il appartient √† la m√™me √©cole
    etudiant = get_object_or_404(Etudiant, pk=etudiant_id, ecole=ecole)

    # 3Ô∏è‚É£ R√©cup√©ration de l'ann√©e scolaire active pour l'√©cole
    annee_active = AnneeScolaire.objects.filter(active=True, ecole=ecole).first()
    if not annee_active:
        messages.error(request, "Aucune ann√©e scolaire active n'a √©t√© trouv√©e pour votre √©cole.")
        return redirect('liste_annees_scolaires')

    # 4Ô∏è‚É£ Traitement du formulaire
    if request.method == 'POST':
        form = NoteForm(request.POST, user=request.user)
        if form.is_valid():
            note = form.save(commit=False)
            note.etudiant = etudiant
            note.ecole = ecole
            note.annee_scolaire = annee_active
            note.save()
            messages.success(request, f"La note pour {etudiant.prenom} {etudiant.nom} a √©t√© ajout√©e avec succ√®s.")
            return redirect('detail_etudiant', etudiant_id=etudiant.pk)
        else:
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f"{field} : {error}")
    else:
        form = NoteForm(user=request.user)

    # 5Ô∏è‚É£ Rendu du template
    return render(request, 'dashboard/etudiants/ajouter_note.html', {
        'form': form,
        'etudiant': etudiant,
        'annee_active': annee_active,
    })


# ... cr√©er modifier_note, supprimer_note, ajouter_paiement, modifier_paiement, etc. sur le m√™me principe

# --- G√©n√©ration de Certificat de Fr√©quentation ---



def draw_pdf_content(p, etudiant, annee_scolaire_active, settings, nb_presences, code_verification):
    """Dessine le contenu du certificat de fr√©quentation sur le canevas ReportLab."""
    width, height = A4
    LEFT_MARGIN = inch
    RIGHT_MARGIN = width - inch
    HEADER_Y = height - 80

    # --- 1. En-t√™te (Minist√®re & √âcole) ---
    p.setFont("Helvetica-Bold", 12)

    # üîπ Gestion du retour √† la ligne pour le texte du minist√®re
    ministere_text = settings.ministere or "R√âPUBLIQUE DU MALI"
    ministere_lines = wrap(ministere_text, width=55)  # largeur max par ligne

    current_y = HEADER_Y
    for line in ministere_lines:
        p.drawRightString(RIGHT_MARGIN, current_y, line)
        current_y -= 14  # espacement entre les lignes

    # Nom de l'√©cole
    p.setFont("Helvetica", 12)
    p.drawRightString(RIGHT_MARGIN, current_y - 10, f"√âcole : {settings.nom_etablissement.upper()}")

    # Ligne de s√©paration
    p.line(LEFT_MARGIN, current_y - 40, RIGHT_MARGIN, current_y - 40)

    # --- 2. Logo ---
    if settings.logo and hasattr(settings.logo, "path"):
        try:
            p.drawImage(settings.logo.path, LEFT_MARGIN, current_y - 30, width=80, height=80, mask='auto')
        except Exception:
            p.setStrokeColorRGB(0, 0, 0)
            p.rect(LEFT_MARGIN, current_y - 30, 80, 80)
            p.setFont("Helvetica", 8)
            p.drawCentredString(LEFT_MARGIN + 40, current_y + 10, "LOGO MANQUANT")

    # --- 3. Titre Central ---
    TITLE_Y = current_y - 110
    p.setFont("Helvetica-Bold", 20)
    p.drawCentredString(width / 2, TITLE_Y, "CERTIFICAT DE FR√âQUENTATION")

    # --- 4. Corps du Texte (D√©tails de l'√©tudiant) ---
    BODY_Y = TITLE_Y - 40
    p.setFont("Helvetica", 12)

    text_lines = [
        "Nous soussign√©s, Direction de l'√©tablissement, certifions que :",
        "",
        f"Matricule : {etudiant.numero_matricule or 'Non attribu√©'}",
        f"Nom : {etudiant.nom.upper()}",
        f"Pr√©nom(s) : {etudiant.prenom.upper()}",
        f"N√©(e) le {etudiant.date_naissance.strftime('%d/%m/%Y')} √† {etudiant.lieu_naissance or 'N/A'}",
        f"Sexe : {'Masculin' if etudiant.genre == 'M' else 'F√©minin'}",
        "",
        f"A fr√©quent√© la classe de {etudiant.classe.nom_classe if etudiant.classe else 'Non assign√©e'}",
        f"Pendant l'Ann√©e scolaire : {annee_scolaire_active.annee}",
        "",
        f"Jours de pr√©sence enregistr√©s (min.) : {nb_presences} jours.",
        "",
        "En foi de quoi, le pr√©sent certificat est d√©livr√© pour servir et valoir ce que de droit."
    ]

    current_y = BODY_Y
    for line in text_lines:
        # Mettre en gras certaines informations
        if etudiant.nom.upper() in line or etudiant.prenom.upper() in line:
            p.setFont("Helvetica-Bold", 14)
        elif line.startswith("Matricule"):
            p.setFont("Helvetica-Bold", 12)
        else:
            p.setFont("Helvetica", 12)
            
        p.drawString(LEFT_MARGIN, current_y, line)
        current_y -= 18

    # --- 5. Lieu et Date de D√©livrance ---
    SIGN_Y = 180
    location = (settings.adresse_etablissement.split(', ')[-1]
                if settings.adresse_etablissement else "Ville")
    
    p.setFont("Helvetica", 12)
    p.drawString(LEFT_MARGIN, SIGN_Y + 40, f"Fait √† {location}, le {datetime.now().strftime('%d/%m/%Y')}")

    # --- 6. Signature, Cachet & QR Code ---
    # 6.1 QR Code
    qr = qrcode.make(f"https://monetablissement.edu.ml/verifier-certificat/{code_verification}")
    qr_io = BytesIO()
    qr.save(qr_io, format='PNG')
    qr_io.seek(0)
    
    with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_qr_file:
        tmp_qr_file.write(qr_io.read())
        qr_path = tmp_qr_file.name
    
    p.drawImage(qr_path, RIGHT_MARGIN - 100, SIGN_Y, width=80, height=80, mask='auto')
    p.setFont("Helvetica", 8)
    p.drawRightString(RIGHT_MARGIN - 60, SIGN_Y - 10, "Code de v√©rification")
    
    os.remove(qr_path)

    # 6.2 Signature / Cachet
    p.setFont("Helvetica-Bold", 12)
    p.drawString(RIGHT_MARGIN - 150, SIGN_Y - 40, settings.titre_signataire or "Le Directeur")

    # --- 7. Pied de Page ---
    p.setFont("Helvetica-Bold", 8)
    p.drawCentredString(width / 2, 40, f"Contact : {settings.telephone or 'N/A'} - Email : {settings.email_contact or 'N/A'}")
    p.drawCentredString(width / 2, 30, "Certificat d√©livr√© sous l‚Äôautorit√© du directeur.")


# -------------------------------------------------------------------------------------
# Vue Django principale
# -------------------------------------------------------------------------------------

# Le code original de la vue

# --------------------------------------------
# 1Ô∏è‚É£ Vue de g√©n√©ration automatique (PDF direct)
# --------------------------------------------
@login_required
def generer_certificat_frequentation(request, etudiant_id):
    """
    G√©n√©ration du certificat de fr√©quentation (multi-√©cole s√©curis√©)
    """

    # üîπ D√©terminer l'√©cole de l'utilisateur connect√©
    ecole_user = getattr(getattr(request.user, 'profile', None), 'ecole', None)
    if not ecole_user:
        messages.error(request, "Votre profil n'est associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # üîπ R√©cup√©rer uniquement un √©l√®ve appartenant √† cette √©cole
    etudiant = get_object_or_404(Etudiant, pk=etudiant_id, ecole=ecole_user)
    settings = ecole_user

    # üîπ Ann√©e scolaire active pour l‚Äô√©cole de l‚Äôutilisateur
    annee_scolaire_active = AnneeScolaire.objects.filter(ecole=ecole_user, active=True).first()
    if not annee_scolaire_active:
        messages.error(request, "Aucune ann√©e scolaire active trouv√©e pour votre √©cole.")
        return redirect('detail_etudiant', etudiant_id=etudiant.pk)

    # üîπ Calcul des pr√©sences
    try:
        nb_presences = Presence.objects.filter(
            etudiant=etudiant,
            annee_scolaire=annee_scolaire_active,
            statut__in=['Pr√©sent', 'Retard', 'Excus√©']
        ).count()
    except Exception:
        nb_presences = 0

    # ‚ö†Ô∏è Avertissement si peu de pr√©sences
    if nb_presences < 50:
        messages.warning(request, f"‚ö†Ô∏è Seulement {nb_presences} jours de pr√©sence enregistr√©s.")

    # üîπ Code de v√©rification
    code_verification = f"CF-{etudiant.pk}-{annee_scolaire_active.annee}-{datetime.now().strftime('%H%M%S')}"

    # üîπ G√©n√©ration du PDF via ta fonction utilitaire existante
    buffer = BytesIO()
    p = canvas.Canvas(buffer, pagesize=A4)
    draw_pdf_content(p, etudiant, annee_scolaire_active, settings, nb_presences, code_verification)
    p.showPage()
    p.save()
    pdf_data = buffer.getvalue()
    buffer.close()

    # üîπ Sauvegarde du certificat en base
    num_certificat = f"CERT-{etudiant.numero_matricule or etudiant.pk}-{annee_scolaire_active.annee.replace('-', '')}"
    pdf_filename = f"certificat_{etudiant.nom}_{etudiant.prenom}_{annee_scolaire_active.annee}.pdf"
    qr_filename = f"qr_{etudiant.nom}_{etudiant.prenom}_{annee_scolaire_active.annee}.png"

    certificat, created = CertificatFrequentation.objects.get_or_create(
        etudiant=etudiant,
        annee_scolaire=annee_scolaire_active,
        defaults={
            'date_delivrance': timezone.now().date(),
            'delivre_par': request.user,
            'numero_certificat': num_certificat,
            'ministere': settings.ministere or "",
            'academie': settings.academie or "",
            'etablissement_reference': settings.nom_etablissement or "",
            'adresse_etablissement': settings.adresse_etablissement or "",
            'mention_legale': "Certificat d√©livr√© sous l‚Äôautorit√© du directeur.",
            'code_verification': code_verification,
            'statut': 'valide',
            'ecole': ecole_user
        }
    )

    certificat.fichier_pdf.save(pdf_filename, ContentFile(pdf_data), save=False)

    # QR code pour v√©rification
    qr_content = BytesIO()
    qr_temp = qrcode.make(f"https://monetablissement.edu.ml/verifier-certificat/  {code_verification}")
    qr_temp.save(qr_content, format='PNG')
    qr_content.seek(0)
    certificat.qr_code.save(qr_filename, ContentFile(qr_content.read()), save=False)

    certificat.save()
    messages.success(request, f"‚úÖ Certificat g√©n√©r√© avec succ√®s pour {etudiant.nom} {etudiant.prenom}.")
    
    response = HttpResponse(pdf_data, content_type='application/pdf')
    response['Content-Disposition'] = f'attachment; filename="{pdf_filename}"'
    return response


# -------------------------------------------------------------------------------------
# creation de certificat
# -------------------------------------------------------------------------------------
from io import BytesIO

@login_required
def creer_certificat_interface(request):
    """
    Cr√©ation d'un certificat de fr√©quentation (PDF A4 + QR code)
    pour un √©l√®ve de l'√©cole de l'utilisateur connect√©.
    """
    ecole = getattr(getattr(request.user, 'profile', None), 'ecole', None)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # üîπ Pr√©-remplir depuis la fiche √©l√®ve
    etudiant_id = request.GET.get('etudiant_id')
    initial_data = {}
    if etudiant_id:
        etudiant = get_object_or_404(Etudiant, pk=etudiant_id, ecole=ecole)
        initial_data['etudiant'] = etudiant
    else:
        etudiant = None

    # üîπ Ann√©e scolaire active
    annee_active = AnneeScolaire.objects.filter(active=True, ecole=ecole).first()
    if not annee_active:
        messages.error(request, "Aucune ann√©e scolaire active trouv√©e pour votre √©cole.")
        return redirect('liste_annees_scolaires')

    # üîπ Traitement du formulaire
    if request.method == 'POST':
        form = CertificatFrequentationForm(request.POST, request.FILES, user=request.user)
        if form.is_valid():
            certificat = form.save(commit=False)
            certificat.ecole = ecole
            certificat.annee_scolaire = annee_active
            certificat.date_delivrance = certificat.date_delivrance or timezone.now().date()
            certificat.delivre_par = request.user

            # --- Num√©ro du certificat ---
            etu = certificat.etudiant
            if not certificat.numero_certificat:
                annee_certif = certificat.date_delivrance.year
                certificat.numero_certificat = f"CERT-{etu.numero_matricule or etu.pk}-{annee_certif}"

            # --- Code de v√©rification & QR ---
            code_verif = f"CERT-{etu.pk}-{annee_active.annee}-{timezone.now().strftime('%H%M%S')}"
            certificat.code_verification = code_verif
            qr_url = f"https://monetablissement.edu.ml/verifier-certificat/{code_verif}"
            qr = qrcode.make(qr_url)

            qr_buffer = BytesIO()
            qr.save(qr_buffer, format='PNG')
            qr_content = qr_buffer.getvalue()
            qr_image = ImageReader(BytesIO(qr_content))
            qr_filename = f"qr_{etu.nom}_{etu.prenom}.png".replace(" ", "_")

            # --- G√©n√©ration du PDF ---
            pdf_buffer = BytesIO()
            try:
                p = canvas.Canvas(pdf_buffer, pagesize=A4)
                width, height = A4
                LEFT_MARGIN, RIGHT_MARGIN = inch, width - inch
                HEADER_Y = height - 80

                # En-t√™te officiel
                p.setFont("Helvetica-Bold", 14)
                p.drawCentredString(width / 2, HEADER_Y, certificat.ministere)
                p.setFont("Helvetica", 12)
                p.drawCentredString(width / 2, HEADER_Y - 20, certificat.academie)
                p.drawCentredString(width / 2, HEADER_Y - 40, certificat.etablissement_reference)
                p.line(LEFT_MARGIN, HEADER_Y - 60, RIGHT_MARGIN, HEADER_Y - 60)

                # Corps du texte
                text = p.beginText(LEFT_MARGIN, HEADER_Y - 120)
                text.setFont("Helvetica", 12)
                text.textLine("Nous, soussign√©s, Direction de l'√©tablissement, certifions que :")
                text.textLine("")
                text.setFont("Helvetica-Bold", 14)
                text.textLine(f"{etu.nom.upper()} {etu.prenom.upper()}")
                text.setFont("Helvetica", 12)

                date_naissance_str = etu.date_naissance.strftime('%d/%m/%Y') if etu.date_naissance else 'N/A'
                text.textLine(f"N√©(e) le {date_naissance_str} √† {etu.lieu_naissance or 'N/A'}")
                text.textLine(f"Sexe : {'Masculin' if etu.genre == 'M' else 'F√©minin'}")
                text.textLine(f"Matricule : {etu.numero_matricule or 'Non attribu√©'}")
                text.textLine(f"A fr√©quent√© la classe de {etu.classe.nom_classe if etu.classe else 'Non assign√©e'}.")
                text.textLine(f"Ann√©e scolaire : {annee_active.annee}")
                text.textLine("")
                text.textLine(certificat.mention_legale or 
                              "En foi de quoi, le pr√©sent certificat est d√©livr√© pour servir et valoir ce que de droit.")
                p.drawText(text)

                # QR Code
                p.drawImage(qr_image, RIGHT_MARGIN - 100, HEADER_Y - 400, width=80, height=80, mask='auto')

                # Signature et cachet
                lieu = getattr(certificat, "lieu_delivrance", None) or ecole.nom or "N/A"
                p.setFont("Helvetica", 12)
                p.drawString(LEFT_MARGIN, HEADER_Y - 420, f"Fait √† {lieu}, le {timezone.now().strftime('%d/%m/%Y')}")
                p.setFont("Helvetica-Bold", 12)
                p.drawRightString(RIGHT_MARGIN - 50, HEADER_Y - 460, "Le Directeur")

                # Pied de page
                p.setFont("Helvetica-Bold", 8)
                p.drawCentredString(width / 2, 40, f"Contact : {certificat.adresse_etablissement or 'N/A'}")

                p.showPage()
                p.save()
                pdf_data = pdf_buffer.getvalue()
            finally:
                pdf_buffer.close()

            # --- Sauvegarde dans le mod√®le ---
            certificat.qr_code.save(qr_filename, ContentFile(qr_content), save=False)
            certificat.fichier_pdf.save(
                f"certificat_{etu.nom}_{etu.prenom}.pdf".replace(" ", "_"),
                ContentFile(pdf_data),
                save=False
            )
            certificat.statut = 'valide'
            certificat.save()

            messages.success(request, f"‚úÖ Certificat de fr√©quentation g√©n√©r√© avec succ√®s pour {etu.nom} {etu.prenom}.")
            return redirect('detail_etudiant', pk=etu.pk)
        else:
            messages.error(request, "‚ùå Veuillez corriger les erreurs dans le formulaire.")
    else:
        form = CertificatFrequentationForm(initial=initial_data, user=request.user)

    return render(request, "dashboard/etudiants/creer_certificat.html", {"form": form})

# ----------------------------------
# les views de paiement 
#------------------------------

@login_required
def liste_paiements_par_classe_etudiant(request):
    """
    Liste les paiements des √©tudiants regroup√©s par classe,
    filtr√©s par √©cole et ann√©e scolaire active.
    """
    # √âcole de l'utilisateur
    ecole = getattr(getattr(request.user, 'enseignant', None), 'ecole', None) \
            or getattr(getattr(request.user, 'etudiant', None), 'ecole', None) \
            or getattr(getattr(request.user, 'profile', None), 'ecole', None)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # Ann√©e scolaire active pour cette √©cole
    annee_active = AnneeScolaire.objects.filter(active=True, ecole=ecole).first()
    if not annee_active:
        messages.warning(request, "Aucune ann√©e scolaire active n'est d√©finie pour votre √©cole.")
        return render(request, 'dashboard/paiements/paiements_par_classe_etudiant.html', {'data_par_classe': []})

    # Filtres GET
    selected_classe_id = request.GET.get('classe_filter_id')
    selected_statut = request.GET.get('statut_filter')

    try:
        selected_classe_id = int(selected_classe_id) if selected_classe_id else None
    except ValueError:
        selected_classe_id = None

    # Classes et √©tudiants
    classes_qs = Classe.objects.filter(ecole=ecole).order_by('nom_classe')
    etudiants_qs = Etudiant.objects.filter(
        ecole=ecole,
        annee_scolaire_inscription=annee_active
    ).select_related('classe')

    # Paiements filtr√©s
    paiements_qs = Paiement.objects.filter(
        etudiant__ecole=ecole,
        annee_scolaire=annee_active
    ).select_related('etudiant', 'etudiant__classe')

    # Filtrage par classe
    if selected_classe_id:
        etudiants_qs = etudiants_qs.filter(classe_id=selected_classe_id)
        paiements_qs = paiements_qs.filter(etudiant__classe_id=selected_classe_id)
        classes_qs = classes_qs.filter(id=selected_classe_id)

    # Filtrage par statut
    if selected_statut == 'payes':
        paiements_qs = paiements_qs.filter(statut='Pay√©')
    elif selected_statut == 'impayes_partiels':
        paiements_qs = paiements_qs.filter(statut__in=['Impay√©', 'Partiel'])

    # Organisation par √©tudiant
    paiements_par_etudiant = {}
    for paiement in paiements_qs:
        etudiant_id = paiement.etudiant_id
        if etudiant_id not in paiements_par_etudiant:
            paiements_par_etudiant[etudiant_id] = {'payes': [], 'impayes_partiels': []}
        key = 'payes' if paiement.statut == 'Pay√©' else 'impayes_partiels'
        paiements_par_etudiant[etudiant_id][key].append(paiement)

    # Organisation par classe
    data_par_classe = []
    for classe in classes_qs:
        etudiants_data = []
        for etudiant in etudiants_qs.filter(classe=classe):
            paiements_etudiant = paiements_par_etudiant.get(etudiant.id, {'payes': [], 'impayes_partiels': []})
            paiements_list = paiements_etudiant['payes'] + paiements_etudiant['impayes_partiels']
            if paiements_list:
                etudiants_data.append({
                    'etudiant': etudiant,
                    'total_du': sum(p.montant_du for p in paiements_list),
                    'total_paye': sum(p.montant for p in paiements_list),
                    'paiements_payes': paiements_etudiant['payes'],
                    'paiements_impayes_partiels': paiements_etudiant['impayes_partiels'],
                })
        if etudiants_data:
            data_par_classe.append({'classe': classe, 'etudiants_data': etudiants_data})

    context = {
        'annee_active': annee_active,
        'data_par_classe': data_par_classe,
        'toutes_les_classes': Classe.objects.filter(ecole=ecole).order_by('nom_classe'),
        'selected_classe_id': selected_classe_id,
        'selected_statut': selected_statut,
    }
    return render(request, 'dashboard/paiements/paiements_par_classe_etudiant.html', context)





@login_required
def liste_paiements_impayes(request):
    ecole = getattr(getattr(request.user, 'enseignant', None), 'ecole', None) \
            or getattr(getattr(request.user, 'profile', None), 'ecole', None)
    if not ecole:
        messages.warning(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    annee_active = AnneeScolaire.objects.filter(active=True, ecole=ecole).first()
    paiements_impayes = []
    if annee_active:
        paiements_impayes = Paiement.objects.filter(
            etudiant__ecole=ecole,
            annee_scolaire=annee_active,
            statut__in=['Impay√©', 'Partiel']
        ).select_related('etudiant', 'etudiant__classe').order_by('etudiant__classe__nom_classe', 'etudiant__nom')

    return render(request, 'dashboard/paiements/paiements_impayes.html', {
        'paiements_impayes': paiements_impayes,
        'annee_active': annee_active,
    })

@login_required
def liste_paiements_payes(request):
    ecole = getattr(getattr(request.user, 'enseignant', None), 'ecole', None) \
            or getattr(getattr(request.user, 'profile', None), 'ecole', None)
    if not ecole:
        messages.warning(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    annee_active = AnneeScolaire.objects.filter(active=True, ecole=ecole).first()
    paiements_payes = []
    if annee_active:
        paiements_payes = Paiement.objects.filter(
            etudiant__ecole=ecole,
            annee_scolaire=annee_active,
            statut='Pay√©'
        ).select_related('etudiant', 'etudiant__classe').order_by('etudiant__classe__nom_classe', '-date_paiement')

    return render(request, 'dashboard/paiements/paiements_payes.html', {
        'paiements_payes': paiements_payes,
        'annee_active': annee_active,
    })







@login_required
def generer_recu_paiement(request, paiement_id):
    """
    G√©n√®re un re√ßu PDF pour un paiement sp√©cifique.
    Utilise wkhtmltopdf si disponible, sinon WeasyPrint comme solution de secours.
    Inclut automatiquement le logo de l‚Äô√©cole dans le PDF.
    """

    # --- 1Ô∏è‚É£ V√©rification du paiement ---
    try:
        paiement = get_object_or_404(
            Paiement,
            pk=paiement_id,
            etudiant__ecole=request.user.profile.ecole
        )
    except AttributeError:
        # Cas des superadmins sans profil.ecole
        paiement = get_object_or_404(Paiement, pk=paiement_id)

    etudiant = paiement.etudiant
    ecole = paiement.etudiant.ecole or EcoleSettings.objects.filter(unique_instance=True).first()

    # --- 2Ô∏è‚É£ Pr√©paration du logo (chemin absolu pour PDF) ---
    logo_url = ""
    if ecole and ecole.logo:
        try:
            logo_url = request.build_absolute_uri(ecole.logo.url)
        except Exception:
            logo_url = ""  # au cas o√π MEDIA_URL n‚Äôest pas dispo

    # --- 3Ô∏è‚É£ Contexte du re√ßu ---
    context = {
        'paiement': paiement,
        'etudiant': etudiant,
        'ecole': ecole,
        'logo_url': logo_url,  # ajout√© pour affichage dans le template
        
    }

    # --- 4Ô∏è‚É£ Rendu HTML ---
    html_string = render_to_string('dashboard/paiements/recu_paiement.html', context)

    # --- 5Ô∏è‚É£ Options wkhtmltopdf ---
    options = {
        'page-size': 'A5',
        'encoding': "UTF-8",
        'no-outline': None,
        'margin-top': '0.4in',
        'margin-bottom': '0.4in',
        'margin-left': '0.3in',
        'margin-right': '0.3in',
    }

    pdf_data = None

    # --- 6Ô∏è‚É£ G√©n√©ration du PDF ---
    try:
        # Cherche wkhtmltopdf sur le syst√®me
        path_wkhtmltopdf = '/usr/bin/wkhtmltopdf'
        if not os.path.exists(path_wkhtmltopdf):
            path_wkhtmltopdf = shutil.which("wkhtmltopdf")

        if path_wkhtmltopdf:
            config = pdfkit.configuration(wkhtmltopdf=path_wkhtmltopdf)
            pdf_data = pdfkit.from_string(html_string, False, options=options, configuration=config)
        else:
            raise OSError("wkhtmltopdf non trouv√©")

    except Exception as e:
        # --- 7Ô∏è‚É£ Fallback WeasyPrint ---
        messages.warning(request, f"wkhtmltopdf introuvable ‚Äî g√©n√©ration via WeasyPrint ({e})")
        pdf_data = HTML(string=html_string, base_url=request.build_absolute_uri("/")).write_pdf()

    # --- 8Ô∏è‚É£ R√©ponse HTTP ---
    response = HttpResponse(pdf_data, content_type='application/pdf')
    response['Content-Disposition'] = f'inline; filename="Recu_{etudiant.nom}_{paiement.id}.pdf"'
    return response






# --- CRUD pour les Ann√©es Scolaires ---



@login_required
def liste_annees_scolaires(request):
    """
    Liste toutes les ann√©es scolaires pour l'√©cole de l'utilisateur connect√©
    et calcule l'ann√©e scolaire actuelle selon le calendrier.
    """
    # üîπ R√©cup√©rer l'√©cole de l'utilisateur
    ecole = (
        getattr(getattr(request.user, 'enseignant', None), 'ecole', None)
        or getattr(getattr(request.user, 'etudiant', None), 'ecole', None)
        or getattr(getattr(request.user, 'profile', None), 'ecole', None)
        or (EcoleSettings.objects.first() if request.user.is_superuser else None)
    )

    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # üîπ Filtrer par √©cole
    annees_scolaires = AnneeScolaire.objects.filter(ecole=ecole).order_by('-annee')

    # üîπ Calcul de l'ann√©e scolaire actuelle selon le calendrier
    today = datetime.now()
    if today.month >= 8:
        start_year = today.year
        end_year = today.year + 1
    else:
        start_year = today.year - 1
        end_year = today.year
    current_academic_year = f"{start_year}-{end_year}"

    context = {
        'annees_scolaires': annees_scolaires,
        'current_calendar_year': today.year,
        'current_academic_year_string': current_academic_year,
        'ecole': ecole,
    }
    return render(request, 'dashboard/annees_scolaires/liste_annees_scolaires.html', context)



@login_required
def creer_annee_scolaire(request):
    """Cr√©er une nouvelle ann√©e scolaire pour l'√©cole de l'utilisateur"""
    ecole = get_user_ecole(request)  # R√©cup√©ration s√©curis√©e de l'√©cole
    if request.method == 'POST':
        form = AnneeScolaireForm(request.POST, ecole=ecole)
        if form.is_valid():
            annee = form.save(commit=False)
            annee.ecole = ecole  # Assigner l'√©cole avant la sauvegarde
            annee.save()
            messages.success(request, "Ann√©e scolaire ajout√©e avec succ√®s.")
            return redirect('liste_annees_scolaires')
        else:
            messages.error(request, "Veuillez corriger les erreurs dans le formulaire.")
    else:
        form = AnneeScolaireForm(ecole=ecole)

    return render(request, 'dashboard/annees_scolaires/form_annee_scolaire.html', {
        'form': form,
        'action': 'Cr√©er'
    })


@login_required
def modifier_annee_scolaire(request, pk):
    """Modifier une ann√©e scolaire existante de l'√©cole de l'utilisateur"""
    ecole = get_user_ecole(request)
    annee = get_object_or_404(AnneeScolaire, pk=pk, ecole=ecole)  # ‚ö†Ô∏è Filtrage par √©cole pour s√©curit√©

    if request.method == 'POST':
        form = AnneeScolaireForm(request.POST, instance=annee, ecole=ecole)
        if form.is_valid():
            form.save()
            messages.success(request, "Ann√©e scolaire mise √† jour avec succ√®s.")
            return redirect('liste_annees_scolaires')
        else:
            messages.error(request, "Veuillez corriger les erreurs dans le formulaire.")
    else:
        form = AnneeScolaireForm(instance=annee, ecole=ecole)

    return render(request, 'dashboard/annees_scolaires/form_annee_scolaire.html', {
        'form': form,
        'action': 'Modifier'
    })



@login_required
def supprimer_annee_scolaire(request, pk):
    """Supprimer une ann√©e scolaire apr√®s confirmation"""
    annee = get_object_or_404(AnneeScolaire, pk=pk)
    
    if request.method == 'POST':
        annee_nom = annee.annee
        annee.delete()
        messages.success(request, f"L'ann√©e scolaire {annee_nom} a √©t√© supprim√©e.")
        return redirect('liste_annees_scolaires')
    
    return render(request, 'dashboard/annees_scolaires/confirmer_suppression_annee_scolaire.html', {
        'annee': annee
    })


# ==========================
# CRUD Classes
# ==========================

def get_user_ecole(request):
    """R√©cup√®re l'√©cole de l'utilisateur connect√©"""
    return (
        getattr(getattr(request.user, 'enseignant', None), 'ecole', None)
        or getattr(getattr(request.user, 'etudiant', None), 'ecole', None)
        or getattr(getattr(request.user, 'profile', None), 'ecole', None)
        or (EcoleSettings.objects.first() if request.user.is_superuser else None)
    )


@login_required
def liste_classes(request):
    """
    Liste toutes les classes de l'√©cole de l'utilisateur,
    tri√©es par ann√©e scolaire et nom, avec filtrage strict par √©cole.
    """
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    classes = Classe.objects.filter(ecole=ecole) \
                           .select_related('annee_scolaire', 'enseignant_principal') \
                           .order_by('annee_scolaire__annee', 'nom_classe')

    return render(request, 'dashboard/classes/liste_classes.html', {
        'classes': classes,
        'ecole': ecole
    })


@login_required
def creer_classe(request):
    """
    Cr√©er une nouvelle classe pour l'√©cole de l'utilisateur
    et assigner automatiquement l'ann√©e scolaire active.
    Filtre les champs du formulaire selon l'√©cole.
    """
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # R√©cup√©rer la premi√®re ann√©e active pour cette √©cole
    annee_active = AnneeScolaire.objects.filter(ecole=ecole, active=True).order_by('-annee').first()
    if not annee_active:
        messages.warning(request, "Veuillez d√©finir une ann√©e scolaire active avant de cr√©er une classe.")
        return redirect('liste_annees_scolaires')

    if request.method == 'POST':
        form = ClasseForm(request.POST, ecole=ecole)
        if form.is_valid():
            classe = form.save(commit=False)
            classe.ecole = ecole
            classe.annee_scolaire = annee_active  # assigner automatiquement l'ann√©e active
            classe.save()
            messages.success(request, f"Classe '{classe.nom_classe}' ajout√©e avec succ√®s.")
            return redirect('liste_classes')
        messages.error(request, "Veuillez corriger les erreurs dans le formulaire.")
    else:
        form = ClasseForm(ecole=ecole)

    return render(request, 'dashboard/classes/form_classe.html', {
        'form': form,
        'action': 'Cr√©er',
        'annee_active': annee_active,
    })

@login_required
def modifier_classe(request, pk):
    """
    Modifier une classe existante uniquement si elle appartient √† l'√©cole de l'utilisateur.
    Passe l'√©cole au formulaire pour filtrer les champs li√©s (ex: mati√®res, enseignants).
    """
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    classe = get_object_or_404(Classe, pk=pk, ecole=ecole)

    if request.method == 'POST':
        form = ClasseForm(request.POST, instance=classe, ecole=ecole)
        if form.is_valid():
            form.save()
            messages.success(request, "Classe mise √† jour avec succ√®s.")
            return redirect('liste_classes')
        else:
            messages.error(request, "Veuillez corriger les erreurs dans le formulaire.")
    else:
        form = ClasseForm(instance=classe, ecole=ecole)

    return render(request, 'dashboard/classes/form_classe.html', {
        'form': form,
        'action': 'Modifier'
    })


@login_required
def supprimer_classe(request, pk):
    """
    Supprimer une classe uniquement si elle appartient √† l'√©cole de l'utilisateur.
    """
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    classe = get_object_or_404(Classe, pk=pk, ecole=ecole)

    if request.method == 'POST':
        nom_classe = classe.nom_classe
        classe.delete()
        messages.success(request, f"La classe {nom_classe} a √©t√© supprim√©e.")
        return redirect('liste_classes')

    return render(request, 'dashboard/classes/confirmer_suppression_classe.html', {
        'classe': classe
    })


# ------------------ MATIERES ------------------

@login_required
def liste_matieres(request):
    """Liste des mati√®res filtr√©e par √©cole"""
    ecole = getattr(getattr(request.user, 'enseignant', None), 'ecole', None) \
            or getattr(getattr(request.user, 'profile', None), 'ecole', None)

    matieres = Matiere.objects.filter(ecole=ecole).order_by('nom')
    return render(request, 'dashboard/matieres/liste_matieres.html', {'matieres': matieres, 'ecole': ecole})


@login_required
def creer_matiere(request):
    """Cr√©er une mati√®re li√©e √† l'√©cole de l'utilisateur"""
    ecole = getattr(getattr(request.user, 'enseignant', None), 'ecole', None) \
            or getattr(getattr(request.user, 'profile', None), 'ecole', None)

    if request.method == 'POST':
        form = MatiereForm(request.POST)
        if form.is_valid():
            matiere = form.save(commit=False)
            matiere.ecole = ecole
            matiere.save()
            messages.success(request, "Mati√®re ajout√©e avec succ√®s.")
            return redirect('liste_matieres')
        messages.error(request, "Veuillez corriger les erreurs dans le formulaire.")
    else:
        form = MatiereForm()
    
    return render(request, 'dashboard/matieres/form_matiere.html', {'form': form, 'action': 'Cr√©er'})


@login_required
def modifier_matiere(request, pk):
    """Modifier une mati√®re uniquement si elle appartient √† l'√©cole de l'utilisateur"""
    ecole = getattr(getattr(request.user, 'enseignant', None), 'ecole', None) \
            or getattr(getattr(request.user, 'profile', None), 'ecole', None)

    matiere = get_object_or_404(Matiere, pk=pk, ecole=ecole)

    if request.method == 'POST':
        form = MatiereForm(request.POST, instance=matiere)
        if form.is_valid():
            form.save()
            messages.success(request, "Mati√®re mise √† jour avec succ√®s.")
            return redirect('liste_matieres')
        messages.error(request, "Veuillez corriger les erreurs dans le formulaire.")
    else:
        form = MatiereForm(instance=matiere)
    
    return render(request, 'dashboard/matieres/form_matiere.html', {'form': form, 'action': 'Modifier'})


@login_required
def supprimer_matiere(request, pk):
    """Supprimer une mati√®re uniquement si elle appartient √† l'√©cole de l'utilisateur"""
    ecole = getattr(getattr(request.user, 'enseignant', None), 'ecole', None) \
            or getattr(getattr(request.user, 'profile', None), 'ecole', None)

    matiere = get_object_or_404(Matiere, pk=pk, ecole=ecole)

    if request.method == 'POST':
        nom_matiere = matiere.nom
        matiere.delete()
        messages.success(request, f"La mati√®re {nom_matiere} a √©t√© supprim√©e.")
        return redirect('liste_matieres')
    
    return render(request, 'dashboard/matieres/confirmer_suppression_matiere.html', {'matiere': matiere})


# ==========================
# CRUD Enseignants
# ==========================

@login_required
def liste_enseignants(request):
    """Liste des enseignants filtr√©e par l'√©cole de l'utilisateur"""
    ecole = (
        getattr(getattr(request.user, 'enseignant', None), 'ecole', None)
        or getattr(getattr(request.user, 'profile', None), 'ecole', None)
        or (EcoleSettings.objects.first() if request.user.is_superuser else None)
    )

    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    enseignants = Enseignant.objects.filter(ecole=ecole).order_by('nom', 'prenom')
    return render(request, 'dashboard/enseignants/liste_enseignants.html', {'enseignants': enseignants, 'ecole': ecole})


@login_required
def creer_enseignant(request):
    ecole = (
        getattr(getattr(request.user, 'enseignant', None), 'ecole', None)
        or getattr(getattr(request.user, 'profile', None), 'ecole', None)
        or (EcoleSettings.objects.first() if request.user.is_superuser else None)
    )

    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    if request.method == 'POST':
        form = EnseignantForm(request.POST)
        if form.is_valid():
            enseignant = form.save(commit=False)
            enseignant.ecole = ecole  # Associer automatiquement l'√©cole
            enseignant.save()
            messages.success(request, f"L'enseignant {enseignant.prenom} {enseignant.nom} a √©t√© ajout√© avec succ√®s.")
            return redirect('liste_enseignants')
        messages.error(request, "Veuillez corriger les erreurs dans le formulaire.")
    else:
        form = EnseignantForm()
    
    return render(request, 'dashboard/enseignants/form_enseignant.html', {'form': form, 'action': 'Cr√©er'})


@login_required
def modifier_enseignant(request, pk):
    enseignant = get_object_or_404(Enseignant, pk=pk)

    # V√©rifier que l'enseignant appartient √† l'√©cole de l'utilisateur
    ecole = (
        getattr(getattr(request.user, 'enseignant', None), 'ecole', None)
        or getattr(getattr(request.user, 'profile', None), 'ecole', None)
        or (EcoleSettings.objects.first() if request.user.is_superuser else None)
    )
    if not request.user.is_superuser and enseignant.ecole != ecole:
        messages.error(request, "Vous n'√™tes pas autoris√© √† modifier cet enseignant.")
        return redirect('dashboard_accueil')

    if request.method == 'POST':
        form = EnseignantForm(request.POST, instance=enseignant)
        if form.is_valid():
            form.save()
            messages.success(request, f"L'enseignant {enseignant.prenom} {enseignant.nom} a √©t√© mis √† jour.")
            return redirect('liste_enseignants')
        messages.error(request, "Veuillez corriger les erreurs dans le formulaire.")
    else:
        form = EnseignantForm(instance=enseignant)
    
    return render(request, 'dashboard/enseignants/form_enseignant.html', {'form': form, 'action': 'Modifier'})


@login_required
def supprimer_enseignant(request, pk):
    enseignant = get_object_or_404(Enseignant, pk=pk)

    ecole = (
        getattr(getattr(request.user, 'enseignant', None), 'ecole', None)
        or getattr(getattr(request.user, 'profile', None), 'ecole', None)
        or (EcoleSettings.objects.first() if request.user.is_superuser else None)
    )
    if not request.user.is_superuser and enseignant.ecole != ecole:
        messages.error(request, "Vous n'√™tes pas autoris√© √† supprimer cet enseignant.")
        return redirect('dashboard_accueil')

    if request.method == 'POST':
        nom_complet = f"{enseignant.prenom} {enseignant.nom}"
        enseignant.delete()
        messages.success(request, f"L'enseignant {nom_complet} a √©t√© supprim√©.")
        return redirect('liste_enseignants')
    
    return render(request, 'dashboard/enseignants/confirmer_suppression_enseignant.html', {'enseignant': enseignant})


# ==========================
# CRUD Programmes Mati√®res
# ==========================
@login_required
def liste_programmes_matiere(request):
    # R√©cup√©rer l'√©cole de l'utilisateur
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # R√©cup√©rer l'ann√©e scolaire active pour cette √©cole
    annee_active = AnneeScolaire.objects.filter(active=True, ecole=ecole).first()
    if not annee_active:
        messages.warning(request, "Aucune ann√©e scolaire active n'est d√©finie pour votre √©cole.")
        return redirect('liste_annees_scolaires')

    # Filtrer les programmes de mati√®re par √©cole et ann√©e scolaire active
    programmes = ProgrammeMatiere.objects.filter(
        classe__ecole=ecole,
        classe__annee_scolaire=annee_active
    ).select_related('classe', 'matiere', 'enseignant').order_by('classe__nom_classe', 'matiere__nom')

    return render(request, 'dashboard/programmes_matiere/liste_programmes_matiere.html', {
        'programmes': programmes,
        'annee_active': annee_active,
    })


@login_required
def creer_programme_matiere(request):
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    if request.method == 'POST':
        form = ProgrammeMatiereForm(request.POST, ecole=ecole)
        if form.is_valid():
            programme = form.save(commit=False)
            programme.ecole = ecole  # affecte l‚Äô√©cole automatiquement
            programme.save()
            messages.success(request, "Programme mati√®re ajout√© avec succ√®s.")
            return redirect('liste_programmes_matiere')
        messages.error(request, "Veuillez corriger les erreurs dans le formulaire.")
    else:
        form = ProgrammeMatiereForm(ecole=ecole)

    return render(request, 'dashboard/programmes_matiere/form_programme_matiere.html', {
        'form': form,
        'action': 'Cr√©er'
    })


@login_required
def modifier_programme_matiere(request, pk):
    # R√©cup√©rer l'√©cole de l'utilisateur connect√©
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # R√©cup√©rer le programme mati√®re pour l'√©cole courante
    programme = get_object_or_404(
        ProgrammeMatiere.objects.select_related('classe', 'matiere', 'enseignant'),
        pk=pk,
        classe__ecole=ecole  # üî• Filtrage strict par √©cole via la classe
    )

    # Cr√©ation du formulaire
    if request.method == 'POST':
        form = ProgrammeMatiereForm(request.POST, instance=programme, ecole=ecole)
        if form.is_valid():
            form.save()
            messages.success(request, "Programme mati√®re mis √† jour avec succ√®s.")
            return redirect('liste_programmes_matiere')
        else:
            messages.error(request, "Veuillez corriger les erreurs dans le formulaire.")
    else:
        form = ProgrammeMatiereForm(instance=programme, ecole=ecole)

    return render(request, 'dashboard/programmes_matiere/form_programme_matiere.html', {
        'form': form,
        'action': 'Modifier',
        'programme': programme
    })



@login_required
def supprimer_programme_matiere(request, pk):
    # r√©cup√©rer l'√©cole de l'utilisateur
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # essayer de r√©cup√©rer le programme pour cette √©cole
    try:
        # on suppose que ProgrammeMatiere est li√© √† une classe (classe) et que la classe a un champ ecole
        programme = ProgrammeMatiere.objects.get(pk=pk, classe__ecole=ecole)
    except ProgrammeMatiere.DoesNotExist:
        # si superuser, on peut permettre l'acc√®s sans filtre (optionnel)
        if request.user.is_superuser:
            try:
                programme = ProgrammeMatiere.objects.get(pk=pk)
            except ProgrammeMatiere.DoesNotExist:
                messages.error(request, "Le programme demand√© n'existe pas.")
                return redirect('liste_programmes_matiere')
        else:
            messages.error(request, "Programme introuvable ou n'appartient pas √† votre √©cole.")
            return redirect('liste_programmes_matiere')

    # confirmation POST -> suppression
    if request.method == 'POST':
        nom_complet = f"{programme.matiere.nom} pour {programme.classe.nom_classe}"
        programme.delete()
        messages.success(request, f"Le programme mati√®re '{nom_complet}' a √©t√© supprim√©.")
        return redirect('liste_programmes_matiere')

    # GET -> afficher confirmation
    return render(request, 'dashboard/programmes_matiere/confirmer_suppression_programme_matiere.html', {
        'programme': programme
    })


# --- CRUD pour les Notes ---
# Les fonctions ajouter/modifier/supprimer note sont g√©n√©ralement li√©es √† la page d√©tail √©l√®ve.
# On a d√©j√† ajouter_note ci-dessus. Voici un exemple pour modifier_note.
@login_required
def modifier_note(request, pk):
    # R√©cup√©rer l'√©cole de l'utilisateur connect√©
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # R√©cup√©rer la note si elle appartient √† un √©tudiant de cette √©cole
    note = get_object_or_404(
        Note.objects.select_related('etudiant', 'etudiant__classe'),
        pk=pk,
        etudiant__classe__ecole=ecole  # üî• Filtrage par √©cole
    )
    etudiant_id = note.etudiant.pk

    if request.method == 'POST':
        form = NoteForm(request.POST, instance=note)
        if form.is_valid():
            form.save()
            messages.success(request, "Note modifi√©e avec succ√®s.")
            return redirect('detail_etudiant', etudiant_id=etudiant_id)
        else:
            messages.error(request, "Veuillez corriger les erreurs dans le formulaire.")
    else:
        form = NoteForm(instance=note)

    return render(request, 'dashboard/etudiants/modifier_note.html', {
        'form': form,
        'note': note
    })


@login_required
def supprimer_note(request, pk):
    # R√©cup√©rer l'√©cole de l'utilisateur connect√©
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # R√©cup√©rer la note uniquement si elle appartient √† un √©tudiant de cette √©cole
    note = get_object_or_404(
        Note.objects.select_related('etudiant', 'etudiant__classe'),
        pk=pk,
        etudiant__classe__ecole=ecole  # üî• Filtrage strict
    )
    etudiant_id = note.etudiant.pk

    if request.method == 'POST':
        note.delete()
        messages.success(request, "Note supprim√©e avec succ√®s.")
        return redirect('detail_etudiant', etudiant_id=etudiant_id)

    return render(request, 'dashboard/etudiants/confirmer_suppression_note.html', {
        'note': note
    })



# ==========================
# CRUD Paiements
# ==========================
@login_required
def ajouter_paiement(request, etudiant_id):
    # R√©cup√©rer l'√©cole de l'utilisateur connect√©
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # V√©rifier que l'√©tudiant appartient √† la m√™me √©cole
    etudiant = get_object_or_404(Etudiant, pk=etudiant_id, ecole=ecole)

    # R√©cup√©rer l'ann√©e scolaire active pour cette √©cole
    annee_active = AnneeScolaire.objects.filter(active=True, ecole=ecole).first()

    if request.method == 'POST':
        form = PaiementForm(request.POST, request.FILES, ecole=ecole, initial={'etudiant': etudiant})
        if form.is_valid():
            paiement = form.save(commit=False)
            paiement.etudiant = etudiant
            paiement.enregistre_par = request.user
            paiement.ecole = ecole
            paiement.annee_scolaire = annee_active
            paiement.save()
            messages.success(request, f"Paiement ajout√© avec succ√®s pour {etudiant.prenom} {etudiant.nom}.")
            return redirect('detail_etudiant', etudiant_id=etudiant.pk)
        else:
            messages.error(request, "Veuillez corriger les erreurs dans le formulaire.")
    else:
        form = PaiementForm(ecole=ecole, initial={'etudiant': etudiant, 'annee_scolaire': annee_active})

    return render(
        request,
        'dashboard/etudiants/ajouter_paiement.html',
        {'form': form, 'etudiant': etudiant}
    )

    

@login_required
def modifier_paiement(request, pk):
    # R√©cup√©ration de l'√©cole de l'utilisateur connect√©
    user_ecole = get_user_ecole(request)
    if not user_ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # R√©cup√©ration du paiement appartenant √† un √©tudiant de cette √©cole
    paiement = get_object_or_404(
        Paiement.objects.select_related('etudiant', 'etudiant__classe'),
        pk=pk,
        etudiant__classe__ecole=user_ecole  # üî• Filtrage par √©cole
    )
    etudiant = paiement.etudiant
    ecole = etudiant.classe.ecole  # L'√©cole de l'√©tudiant

    # V√©rification de permission : superuser ou √©cole correspondante
    if not request.user.is_superuser and user_ecole != ecole:
        messages.error(request, "Vous n'√™tes pas autoris√© √† modifier ce paiement.")
        return redirect('dashboard_accueil')

    # Ann√©e scolaire active pour l'√©cole
    annee_active = AnneeScolaire.objects.filter(active=True, ecole=ecole).first()

    if request.method == 'POST':
        form = PaiementForm(request.POST, request.FILES, instance=paiement, ecole=ecole)
        if form.is_valid():
            paiement_modifie = form.save(commit=False)
            paiement_modifie.annee_scolaire = annee_active
            paiement_modifie.save()
            messages.success(request, "Paiement modifi√© avec succ√®s.")
            return redirect('detail_etudiant', etudiant_id=etudiant.pk)
        else:
            messages.error(request, "Veuillez corriger les erreurs dans le formulaire.")
    else:
        form = PaiementForm(instance=paiement, ecole=ecole)

    return render(
        request,
        'dashboard/etudiants/modifier_paiement.html',
        {'form': form, 'paiement': paiement, 'etudiant': etudiant}
    )


@login_required
def supprimer_paiement(request, pk):
    # R√©cup√©ration de l'√©cole de l'utilisateur connect√©
    user_ecole = get_user_ecole(request)
    if not user_ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # R√©cup√©ration du paiement appartenant √† l'√©cole de l'utilisateur
    paiement = get_object_or_404(
        Paiement.objects.select_related('etudiant', 'etudiant__classe'),
        pk=pk,
        etudiant__classe__ecole=user_ecole  # üî• Filtrage strict
    )
    etudiant_id = paiement.etudiant.pk

    # V√©rification de permission : superuser ou √©cole correspondante
    if not request.user.is_superuser and paiement.etudiant.classe.ecole != user_ecole:
        messages.error(request, "Vous n'√™tes pas autoris√© √† supprimer ce paiement.")
        return redirect('dashboard_accueil')

    if request.method == 'POST':
        paiement.delete()
        messages.success(request, "Paiement supprim√© avec succ√®s.")
        return redirect('detail_etudiant', etudiant_id=etudiant_id)

    return render(
        request,
        'dashboard/etudiants/confirmer_suppression_paiement.html',
        {'paiement': paiement}
    )





@login_required
def liste_paiements_impayes(request):
    # R√©cup√©rer l'√©cole de l'utilisateur
    ecole = getattr(getattr(request.user, 'enseignant', None), 'ecole', None) \
            or getattr(getattr(request.user, 'profile', None), 'ecole', None)

    if not ecole:
        messages.warning(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # R√©cup√©rer l'ann√©e scolaire active pour cette √©cole
    annee_active = AnneeScolaire.objects.filter(active=True, ecole=ecole).first()
    if not annee_active:
        messages.warning(request, "Aucune ann√©e scolaire active n'est d√©finie pour votre √©cole.")
        return redirect('liste_annees_scolaires')

    # Paiements impay√©s ou partiels pour les √©l√®ves de l'√©cole
    paiements_impayes = Paiement.objects.filter(
        etudiant__ecole=ecole,
        annee_scolaire=annee_active,
        statut__in=['Impay√©', 'Partiel']
    ).select_related('etudiant', 'etudiant__classe').order_by(
        'etudiant__classe__nom_classe', 'etudiant__nom', 'etudiant__prenom'
    )

    context = {
        'paiements_impayes': paiements_impayes,
        'annee_active': annee_active,
        'ecole': ecole,
    }
    return render(request, 'dashboard/paiements/liste_paiements_impayes.html', context)



# ==========================
# Marquer les pr√©sences pour une classe
# ==========================
@login_required
def marquer_presence_classe(request, classe_id):
    # R√©cup√©rer l'√©cole de l'utilisateur
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    matiere_id = request.GET.get('matiere_id')
    classe = get_object_or_404(Classe, pk=classe_id, ecole=ecole)
    date_aujourdhui = date.today()

    # Ann√©e scolaire active pour cette √©cole
    annee_active = AnneeScolaire.objects.filter(ecole=ecole, active=True).first()
    if not annee_active:
        messages.warning(request, "Veuillez d√©finir une ann√©e scolaire active avant de marquer les pr√©sences.")
        return redirect('liste_annees_scolaires')

    # √âtudiants inscrits pour l'ann√©e active et dans cette √©cole
    etudiants = Etudiant.objects.filter(
        classe=classe,
        annee_scolaire_inscription=annee_active,
        ecole=ecole
    ).order_by('nom', 'prenom')

    # Formset
    PresenceFormSet = formset_factory(PresenceForm, extra=0)
    initial_data = []

    # Pr√©sences d√©j√† enregistr√©es pour cette classe, √©cole et date
    existing_presences = {
        p.etudiant_id: p for p in Presence.objects.filter(
            classe=classe,
            date=date_aujourdhui,
            annee_scolaire=annee_active,
            ecole=ecole
        )
    }

    for etudiant in etudiants:
        p = existing_presences.get(etudiant.id)
        if p:
            initial_data.append({
                'id': p.id,
                'etudiant': etudiant,
                'etudiant_obj': etudiant,
                'classe': classe,
                'date': date_aujourdhui,
                'annee_scolaire': annee_active,
                'statut': p.statut,
                'matiere': p.matiere.pk if p.matiere else None,
                'heure_debut_cours': p.heure_debut_cours,
                'heure_fin_cours': p.heure_fin_cours,
                'motif_absence_retard': p.motif_absence_retard,
                'justificatif_fourni': p.justificatif_fourni,
                'est_present': p.statut == 'Pr√©sent',
                'statut_detail': p.statut if p.statut != 'Pr√©sent' else '',
            })
        else:
            initial_data.append({
                'etudiant': etudiant,
                'etudiant_obj': etudiant,
                'classe': classe,
                'date': date_aujourdhui,
                'annee_scolaire': annee_active,
                'statut': 'Pr√©sent',
                'est_present': True,
                'statut_detail': '',
            })

    if request.method == 'POST':
        formset = PresenceFormSet(request.POST, initial=initial_data)
        if formset.is_valid():
            try:
                with transaction.atomic():
                    for form in formset:
                        est_present = form.cleaned_data.get('est_present')
                        statut_detail = form.cleaned_data.get('statut_detail')
                        presence, created = Presence.objects.get_or_create(
                            etudiant=form.cleaned_data['etudiant'],
                            classe=form.cleaned_data['classe'],
                            date=form.cleaned_data['date'],
                            annee_scolaire=form.cleaned_data['annee_scolaire'],
                            ecole=ecole,  # ‚úÖ Filtre par √©cole
                            defaults={'statut': 'Pr√©sent'}
                        )
                        if est_present:
                            presence.statut = 'Pr√©sent'
                            presence.matiere = None
                            presence.heure_debut_cours = None
                            presence.heure_fin_cours = None
                            presence.motif_absence_retard = ''
                            presence.justificatif_fourni = False
                        else:
                            presence.statut = statut_detail or 'Absent'
                            presence.matiere = form.cleaned_data.get('matiere')
                            presence.heure_debut_cours = form.cleaned_data.get('heure_debut_cours')
                            presence.heure_fin_cours = form.cleaned_data.get('heure_fin_cours')
                            presence.motif_absence_retard = form.cleaned_data.get('motif_absence_retard', '')
                            presence.justificatif_fourni = form.cleaned_data.get('justificatif_fourni', False)
                        presence.save()
                messages.success(request, f"Pr√©sences enregistr√©es pour la classe {classe.nom_classe}.")
                return redirect('liste_classes')
            except Exception as e:
                messages.error(request, f"Erreur lors de l'enregistrement : {e}")
        else:
            messages.error(request, "Veuillez corriger les erreurs dans le formulaire.")
    else:
        formset = PresenceFormSet(initial=initial_data)

    context = {
        'classe': classe,
        'date_aujourdhui': date_aujourdhui,
        'formset': formset,
        'annee_active': annee_active,
        'toutes_les_classes': Classe.objects.filter(ecole=ecole).order_by('nom_classe'),
        'toutes_les_matieres': Matiere.objects.filter(ecole=ecole).order_by('nom'),
        'matiere_id': matiere_id,
    }
    return render(request, 'dashboard/presences/marquer_presence_classe.html', context)



@login_required
def liste_presences(request):
    """
    Vue pour afficher la liste de toutes les pr√©sences d'une √©cole.
    Permet un filtrage par classe et par date.
    """

    # üîπ 1Ô∏è‚É£ R√©cup√©rer l'√©cole de l'utilisateur
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # üîπ 2Ô∏è‚É£ Liste de toutes les classes pour filtre
    classes = Classe.objects.filter(ecole=ecole).order_by('nom_classe')

    # üîπ 3Ô∏è‚É£ R√©cup√©ration de filtres depuis GET
    classe_id = request.GET.get('classe')
    date_filtre = request.GET.get('date')

    classe = None
    if classe_id:
        try:
            classe = Classe.objects.get(pk=classe_id, ecole=ecole)
        except Classe.DoesNotExist:
            messages.warning(request, "La classe s√©lectionn√©e n'existe pas.")
            classe = None

    # Filtrage par ann√©e scolaire active
    annee_active = AnneeScolaire.objects.filter(active=True, ecole=ecole).first()
    if not annee_active:
        messages.warning(request, "Aucune ann√©e scolaire active d√©finie pour votre √©cole.")
        return redirect('dashboard_accueil')

    # üîπ 4Ô∏è‚É£ Construction de la queryset des pr√©sences
    presences = Presence.objects.filter(ecole=ecole, annee_scolaire=annee_active)

    if classe:
        presences = presences.filter(classe=classe)

    if date_filtre:
        try:
            date_obj = datetime.strptime(date_filtre, '%Y-%m-%d').date()
            presences = presences.filter(date=date_obj)
        except ValueError:
            messages.warning(request, "La date s√©lectionn√©e est invalide.")

    presences = presences.select_related('etudiant', 'classe').order_by('date', 'etudiant__nom')

    # üîπ 5Ô∏è‚É£ Contexte pour le template
    context = {
        'presences': presences,
        'classes': classes,
        'classe_selectionnee': classe,
        'date_filtre': date_filtre,
        'annee_active': annee_active,
    }

    return render(request, 'dashboard/presences/liste_presences.html', context)




# ==========================
# Suivi des pr√©sences
# ==========================
@login_required
def suivi_presence_classe(request, classe_id):
    """
    Vue de suivi des pr√©sences d'une classe, filtr√©e strictement par l'√©cole de l'utilisateur connect√©.
    """
    # üîπ R√©cup√©ration de l'√©cole de l'utilisateur
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # üîπ Classe filtr√©e par l'√©cole de l'utilisateur
    classe = get_object_or_404(Classe, pk=classe_id, ecole=ecole)

    # üîπ Ann√©e scolaire active pour cette √©cole
    annee_active = AnneeScolaire.objects.filter(active=True, ecole=ecole).first()
    if not annee_active:
        messages.warning(request, "Aucune ann√©e scolaire active n'est d√©finie pour votre √©cole.")
        return redirect('liste_annees_scolaires')

    # üîπ Filtre par date optionnel
    date_filtre = request.GET.get('date')
    if date_filtre:
        try:
            date_filtre = datetime.strptime(date_filtre, '%Y-%m-%d').date()
        except ValueError:
            date_filtre = None

    # üîπ √âtudiants inscrits dans cette classe et cette √©cole pour l'ann√©e active
    etudiants = Etudiant.objects.filter(
        classe=classe,
        annee_scolaire_inscription=annee_active,
        ecole=ecole
    ).order_by('nom', 'prenom')

    # üîπ Pr√©sences par √©tudiant
    presences_par_etudiant = {}
    for etudiant in etudiants:
        presences_query = Presence.objects.filter(
            etudiant=etudiant,
            classe=classe,
            annee_scolaire=annee_active,
            ecole=ecole
        )
        if date_filtre:
            presences_query = presences_query.filter(date=date_filtre)
        presences_par_etudiant[etudiant] = presences_query.order_by('-date')

    # üîπ Contexte
    context = {
        'classe': classe,
        'presences_par_etudiant': presences_par_etudiant,
        'date_filtre': date_filtre,
        'annee_active': annee_active,
        'toutes_les_classes': Classe.objects.filter(ecole=ecole).order_by('nom_classe'),
    }

    return render(request, 'dashboard/presences/suivi_presence_classe.html', context)
@login_required
def suivi_presence_eleve(request, etudiant_id):
    """
    Suivi des pr√©sences d'un √©l√®ve, filtr√© strictement par l'√©cole de l'utilisateur connect√©.
    """
    # üîπ R√©cup√©ration de l'√©cole de l'utilisateur
    ecole_utilisateur = get_user_ecole(request)
    if not ecole_utilisateur:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # üîπ V√©rification : l'√©l√®ve appartient bien √† l'√©cole de l'utilisateur
    etudiant = get_object_or_404(
        Etudiant.objects.select_related('classe', 'classe__ecole'),
        pk=etudiant_id,
        ecole=ecole_utilisateur
    )

    # üîπ Ann√©e scolaire active pour cette √©cole
    annee_active = AnneeScolaire.objects.filter(
        ecole=ecole_utilisateur,
        active=True
    ).first()

    if not annee_active:
        messages.warning(request, "Aucune ann√©e scolaire active n'est d√©finie pour votre √©cole.")
        return redirect('liste_annees_scolaires')

    # üîπ Pr√©sences filtr√©es par √©l√®ve, √©cole et ann√©e scolaire
    presences = Presence.objects.filter(
        etudiant=etudiant,
        ecole=ecole_utilisateur,
        annee_scolaire=annee_active
    ).order_by('-date')

    # üîπ Statistiques
    stats = {
        'total_presents': presences.filter(statut='Pr√©sent').count(),
        'total_absents': presences.filter(statut='Absent').count(),
        'total_retards': presences.filter(statut='Retard').count(),
        'total_excuses': presences.filter(statut='Excus√©').count(),
    }

    # üîπ Rendu
    context = {
        'etudiant': etudiant,
        'presences': presences,
        **stats,
        'annee_active': annee_active,
    }

    return render(request, 'dashboard/presences/suivi_presence_eleve.html', context)

# ==========================
# Emplois du temps
# ==========================
# üîπ LISTE DES EMPLOIS DU TEMPS (FILTR√â PAR √âCOLE)
# ==========================
@login_required
def liste_emplois_du_temps(request):
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    annee_active = AnneeScolaire.objects.filter(ecole=ecole, active=True).first()
    toutes_les_classes = Classe.objects.filter(ecole=ecole).order_by('nom_classe')

    classe_id = request.GET.get('classe_id')
    classe_selectionnee = get_object_or_404(Classe, pk=classe_id, ecole=ecole) if classe_id else None
    classes_a_afficher = [classe_selectionnee] if classe_selectionnee else toutes_les_classes

    if not annee_active:
        messages.warning(request, "Veuillez d√©finir une ann√©e scolaire active avant de consulter les emplois du temps.")
        return render(request, 'dashboard/emplois_du_temps/emplois_du_temps.html', {
            'annee_active': None,
            'toutes_les_classes': toutes_les_classes,
            'emplois_du_temps_par_classe': {},
            'heures_disponibles': [],
            'jours_semaine': EmploiDuTemps.JourSemaine.values,
        })

    # Colonnes horaires
    plages_horaires = sorted([
        f"{p['heure_debut'].strftime('%H:%M')} - {p['heure_fin'].strftime('%H:%M')}"
        for p in EmploiDuTemps.objects.filter(
            annee_scolaire=annee_active,
            ecole=ecole
        ).values('heure_debut', 'heure_fin').distinct()
    ], key=lambda x: x.split(' - ')[0])

    jours_semaine = EmploiDuTemps.JourSemaine.values
    emplois_par_classe = {}

    for classe in classes_a_afficher:
        edt_items = EmploiDuTemps.objects.filter(
            classe=classe,
            annee_scolaire=annee_active,
            ecole=ecole
        ).select_related('matiere', 'enseignant')

        edt_dict = {jour: {plage: None for plage in plages_horaires} for jour in jours_semaine}
        for item in edt_items:
            plage_str = f"{item.heure_debut.strftime('%H:%M')} - {item.heure_fin.strftime('%H:%M')}"
            if item.jour in edt_dict and plage_str in edt_dict[item.jour]:
                edt_dict[item.jour][plage_str] = item
        emplois_par_classe[classe] = edt_dict

    return render(request, 'dashboard/emplois_du_temps/emplois_du_temps.html', {
        'annee_active': annee_active,
        'toutes_les_classes': toutes_les_classes,
        'classe_selectionnee': classe_selectionnee,
        'emplois_du_temps_par_classe': emplois_par_classe,
        'heures_disponibles': plages_horaires,
        'jours_semaine': jours_semaine,
    })


# ==========================
# üîπ CR√âATION G√âN√âRALE D'EMPLOI DU TEMPS
# ==========================
@login_required
def creer_emploi_du_temps(request, classe_pk=None):
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    classe = get_object_or_404(Classe, pk=classe_pk, ecole=ecole) if classe_pk else None
    annee_active = AnneeScolaire.objects.filter(ecole=ecole, active=True).first()

    if request.method == 'POST':
        form = EmploiDuTempsForm(request.POST)
        if form.is_valid():
            edt = form.save(commit=False)
            edt.ecole = ecole
            if not edt.annee_scolaire:
                edt.annee_scolaire = annee_active
            edt.save()
            messages.success(request, "Le bloc de cours a √©t√© enregistr√© avec succ√®s !")
            return redirect('liste_emplois_du_temps')
        messages.error(request, "Erreur lors de l'enregistrement. V√©rifiez les champs.")
    else:
        initial = {'classe': classe} if classe else {}
        form = EmploiDuTempsForm(initial=initial)

    context = {
        'form': form,
        'classe': classe,
        'action': "Cr√©er" if not request.GET.get('edit') else "Modifier",
    }
    return render(request, 'dashboard/emplois_du_temps/emploi_du_temps_form.html', context)


# ==========================
# üîπ CR√âATION POUR UNE CLASSE SP√âCIFIQUE
# ==========================
@login_required
def creer_emploi_du_temps_pour_classe(request, classe_id):
    # üîπ R√©cup√©ration de l'√©cole de l'utilisateur
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # üîπ V√©rification que la classe appartient √† cette √©cole
    classe = get_object_or_404(Classe, pk=classe_id, ecole=ecole)

    # üîπ Ann√©e scolaire active pour cette √©cole
    annee_active = AnneeScolaire.objects.filter(ecole=ecole, active=True).first()
    if not annee_active:
        messages.error(request, "Aucune ann√©e scolaire active n‚Äôa √©t√© trouv√©e.")
        return redirect('liste_emplois_du_temps')

    if request.method == "POST":
        # üîπ On passe l'√©cole √† notre formulaire pour filtrer les classes, mati√®res et enseignants
        form = EmploiDuTempsForm(request.POST, ecole=ecole)
        if form.is_valid():
            edt = form.save(commit=False)
            edt.ecole = ecole
            edt.classe = classe
            edt.annee_scolaire = annee_active
            edt.save()
            messages.success(request, f"Emploi du temps ajout√© pour {classe.nom_classe}.")
            return redirect('liste_emplois_du_temps')
        else:
            messages.error(request, "Veuillez corriger les erreurs dans le formulaire.")
    else:
        form = EmploiDuTempsForm(initial={'classe': classe}, ecole=ecole)
        form.fields['classe'].widget.attrs['disabled'] = 'disabled'

    return render(request, 'dashboard/emplois_du_temps/form_emploi_du_temps.html', {
        'form': form,
        'action': f"Cr√©er pour {classe.nom_classe}",
        'classe': classe,
    })


# ==========================
# üîπ MODIFICATION D'UN EMPLOI DU TEMPS
# ==========================
@login_required
def modifier_emploi_du_temps(request, pk):
    # üîπ R√©cup√©ration de l'√©cole de l'utilisateur connect√©
    ecole_utilisateur = get_user_ecole(request)
    if not ecole_utilisateur:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # üîπ R√©cup√©rer le bloc uniquement s'il appartient √† cette √©cole
    bloc_edt = get_object_or_404(EmploiDuTemps, pk=pk, ecole=ecole_utilisateur)

    if request.method == 'POST':
        # üîπ Passer l'√©cole au formulaire pour filtrer les choix
        form = EmploiDuTempsForm(request.POST, instance=bloc_edt, ecole=ecole_utilisateur)
        if form.is_valid():
            form.save()
            messages.success(request, "Bloc d'emploi du temps mis √† jour avec succ√®s !")
            return redirect('liste_emplois_du_temps')
        messages.error(request, "Veuillez corriger les erreurs du formulaire.")
    else:
        form = EmploiDuTempsForm(instance=bloc_edt, ecole=ecole_utilisateur)

    return render(request, 'dashboard/emplois_du_temps/form_emploi_du_temps.html', {
        'form': form,
        'action': 'Modifier'
    })

# ==========================
# üîπ REDIRECTION MODIFICATION CLASSE
# ==========================
@login_required
def modifier_emploi_du_temps_classe(request, classe_id):
    messages.error(request, "La modification doit se faire bloc par bloc. Utilisez l'ic√¥ne d'√©dition dans le tableau.")
    return redirect('liste_emplois_du_temps')
# ==========================
# Saisie de notes
# ==========================
@login_required
def saisir_notes_classe_matiere(request, classe_id, matiere_id):
    """
    Saisie ou modification des notes pour une classe et une mati√®re,
    filtr√©e par l'√©cole de l'utilisateur connect√©.
    """
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    classe = get_object_or_404(Classe, pk=classe_id, ecole=ecole)
    matiere = get_object_or_404(Matiere, pk=matiere_id, ecole=ecole)

    annee_active = AnneeScolaire.objects.filter(active=True, ecole=ecole).first()
    if not annee_active:
        messages.error(request, "Veuillez d√©finir une ann√©e scolaire active pour votre √©cole.")
        return redirect('liste_notes_par_classe_matiere', classe_id=classe_id, matiere_id=matiere_id)

    etudiants = Etudiant.objects.filter(classe=classe, ecole=ecole).order_by('nom', 'prenom')
    notes_existantes = {
        note.etudiant_id: note
        for note in Note.objects.filter(
            etudiant__in=etudiants,
            matiere=matiere,
            annee_scolaire=annee_active,
            ecole=ecole
        )
    }

    if request.method == 'POST':
        periode = request.POST.get('periode_evaluation')
        type_eval = request.POST.get('type_evaluation')
        date_eval = request.POST.get('date_evaluation')

        notes_sauvegardees, erreurs = 0, 0

        for etudiant in etudiants:
            note_str = request.POST.get(f'note_{etudiant.pk}', '').strip()
            if note_str:
                try:
                    note_valeur = float(note_str.replace(',', '.'))
                    Note.objects.update_or_create(
                        etudiant=etudiant,
                        matiere=matiere,
                        periode_evaluation=periode,
                        annee_scolaire=annee_active,
                        ecole=ecole,
                        defaults={
                            'valeur': note_valeur,
                            'type_evaluation': type_eval,
                            'date_evaluation': date_eval,
                        }
                    )
                    notes_sauvegardees += 1
                except ValueError:
                    erreurs += 1
                    messages.warning(request, f"La note de {etudiant.prenom} {etudiant.nom} est invalide.")
                except Exception as e:
                    erreurs += 1
                    messages.error(request, f"Erreur pour {etudiant.prenom} {etudiant.nom} : {e}")

        if notes_sauvegardees:
            messages.success(request, f"{notes_sauvegardees} notes enregistr√©es ou mises √† jour avec succ√®s.")
        if erreurs == 0:
            return redirect('liste_notes_par_classe_matiere', classe_id=classe_id, matiere_id=matiere_id)

    return render(request, 'dashboard/notes/saisir_notes.html', {
        'classe': classe,
        'matiere': matiere,
        'annee_active': annee_active,
        'etudiants': etudiants,
        'notes_existantes': notes_existantes,
    })


# ======================================================
# Modification individuelle d'une note
# ======================================================
@login_required
def modifier_note(request, pk):
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    note = get_object_or_404(Note, pk=pk, ecole=ecole)

    if request.method == 'POST':
        try:
            nouvelle_valeur = request.POST.get('valeur', '').strip()
            note.valeur = float(nouvelle_valeur.replace(',', '.'))
            note.type_evaluation = request.POST.get('type_evaluation')
            note.date_evaluation = request.POST.get('date_evaluation')
            note.save()
            messages.success(request, f"Note de {note.etudiant.prenom} {note.etudiant.nom} mise √† jour.")
            return redirect('liste_notes_par_classe_matiere',
                            classe_id=note.etudiant.classe.pk,
                            matiere_id=note.matiere.pk)
        except ValueError:
            messages.error(request, "La valeur de la note doit √™tre un nombre valide.")
        except Exception as e:
            messages.error(request, f"Erreur lors de la modification : {e}")

    return render(request, 'dashboard/notes/modifier_note.html', {'note': note})


# ======================================================
# Suppression individuelle d'une note
# ======================================================
@login_required
def supprimer_note(request, pk):
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    note = get_object_or_404(Note, pk=pk, ecole=ecole)
    classe_id = note.etudiant.classe.pk
    matiere_id = note.matiere.pk

    if request.method == 'POST':
        note.delete()
        messages.success(request, f"Note de {note.etudiant.prenom} {note.etudiant.nom} supprim√©e.")
        return redirect('liste_notes_par_classe_matiere', classe_id=classe_id, matiere_id=matiere_id)

    return render(request, 'dashboard/notes/confirmer_suppression_note.html', {'note': note})


# ======================================================
# G√©n√©ration PDF du bulletin scolaire
# ======================================================
@login_required
def generer_bulletin_scolaire(request, etudiant_id, periode):
    etudiant = get_object_or_404(Etudiant, pk=etudiant_id)
    annee_scolaire = AnneeScolaire.objects.filter(active=True).first()
    ecole = EcoleSettings.objects.first()

    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = f'attachment; filename="bulletin_{etudiant.nom}_{etudiant.prenom}_{periode}.pdf"'

    p = canvas.Canvas(response, pagesize=A4)
    width, height = A4

    # --- R√©cup√©ration des notes ---
    notes_etudiant = Note.objects.filter(
        etudiant=etudiant,
        periode_evaluation=periode,
        annee_scolaire=annee_scolaire
    )

    # Moyenne g√©n√©rale
    moy_gen = sum([n.valeur for n in notes_etudiant]) / len(notes_etudiant) if notes_etudiant else 0.0

    # ------------------- Ent√™te -------------------
    p.setFont("Helvetica-Bold", 14)
    p.drawCentredString(width / 2, height - 40, "BULLETIN DE NOTES")
    if ecole:
        p.setFont("Helvetica-Bold", 12)
        p.drawString(50, height - 60, ecole.nom_etablissement)

    p.setFont("Helvetica", 10)
    p.drawString(50, height - 75, f"Ann√©e Scolaire : {annee_scolaire.annee if annee_scolaire else 'N/A'}")
    p.drawString(50, height - 90, f"P√©riode : {periode}")

    # ------------------- Infos √âl√®ve -------------------
    y = height - 130
    p.setFont("Helvetica-Bold", 10)
    p.drawString(50, y, "INFORMATIONS √âL√àVE")
    p.setFont("Helvetica", 10)
    y -= 15
    p.drawString(50, y, f"Nom et pr√©nom : {etudiant.nom} {etudiant.prenom}")
    p.drawString(300, y, f"N¬∞ Matricule : {etudiant.numero_matricule or ''}")
    y -= 15
    p.drawString(50, y, f"Classe : {etudiant.classe.nom_classe if etudiant.classe else ''}")
    y -= 30

    # ------------------- Tableau des Notes -------------------
    data = [["Mati√®res", "Note", "Moy Classe", "Mini", "Maxi", "Appr√©ciation"]]
    for note in notes_etudiant:
        data.append([note.matiere.nom, f"{note.valeur:.2f}", "N/A", "N/A", "N/A", ""])

    data.append(["Moyenne G√©n√©rale", f"{moy_gen:.2f}", "", "", "", ""])

    table = Table(data, colWidths=[120, 60, 60, 50, 50, 150])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.Color(0.2, 0.4, 0.6)),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
        ('ALIGN', (1, 1), (-1, -1), 'CENTER'),
        ('ALIGN', (0, 0), (0, -1), 'LEFT'),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
        ('BACKGROUND', (0, -1), (-1, -1), colors.lightgrey),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTNAME', (0, -1), (0, -1), 'Helvetica-Bold'),
    ]))

    y_table = y - len(data)*20
    table.wrapOn(p, width, height)
    table.drawOn(p, 50, y_table)

    # ------------------- Appr√©ciation & Signature -------------------
    y_sign = y_table - 80
    p.setFont("Helvetica-Bold", 10)
    p.drawString(50, y_sign, "Appr√©ciation du conseil de classe :")
    p.rect(50, y_sign - 50, 400, 50)
    p.drawString(55, y_sign - 30, "Tr√®s bon trimestre. Encouragements.")

    p.drawString(460, y_sign, "Cachet et Signature du Chef :")
    p.rect(460, y_sign - 50, 100, 50)

    p.showPage()
    p.save()
    return response

# ======================================================
# Liste et filtrage des notes par classe et mati√®re
# ======================================================
@login_required
def liste_notes_par_classe(request, classe_id=None, matiere_id=None):
    """
    Liste des notes par classe et mati√®re pour l'√©cole de l'utilisateur.
    Si classe_id et matiere_id sont pass√©s en GET ou URL, affiche les notes correspondantes.
    """
    ecole = get_user_ecole(request)
    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # R√©cup√©ration de l'ann√©e scolaire active
    annee_active = AnneeScolaire.objects.filter(ecole=ecole, active=True).first()
    if not annee_active:
        messages.error(request, "Veuillez d√©finir une ann√©e scolaire active pour votre √©cole.")
        return render(request, 'dashboard/notes/liste_notes_par_classe.html', {})

    # Priorit√© : URL parameters > GET parameters
    classe_id = classe_id or request.GET.get('classe_id')
    matiere_id = matiere_id or request.GET.get('matiere_id')

    toutes_les_classes = Classe.objects.filter(ecole=ecole).order_by('nom_classe')
    toutes_les_matieres = Matiere.objects.filter(ecole=ecole).order_by('nom')

    classe = None
    matiere = None
    etudiants_avec_notes = {}

    if classe_id and matiere_id:
        classe = get_object_or_404(Classe, pk=classe_id, ecole=ecole)
        matiere = get_object_or_404(Matiere, pk=matiere_id, ecole=ecole)

        # √âtudiants de la classe pour l'ann√©e scolaire active
        etudiants = Etudiant.objects.filter(
            classe=classe,
            ecole=ecole,
            annee_scolaire_inscription=annee_active
        ).order_by('nom', 'prenom')

        # R√©cup√©rer toutes les notes en une seule requ√™te
        notes = Note.objects.filter(
            etudiant__in=etudiants,
            matiere=matiere,
            annee_scolaire=annee_active,
            ecole=ecole
        ).select_related('etudiant').order_by('etudiant__nom', 'date_evaluation')

        # Construire un dictionnaire {√©tudiant: [notes]}
        etudiants_avec_notes = {etudiant: [] for etudiant in etudiants}
        for note in notes:
            etudiants_avec_notes[note.etudiant].append(note)

    context = {
        'classe': classe,
        'matiere': matiere,
        'annee_active': annee_active,
        'toutes_les_classes': toutes_les_classes,
        'toutes_les_matieres': toutes_les_matieres,
        'etudiants_avec_notes': etudiants_avec_notes,
    }

    return render(request, 'dashboard/notes/liste_notes_par_classe.html', context)

# ======================================================
# EXPORT DES NOTES VERS EXCEL
# ======================================================
@login_required
def export_notes_excel(request):
    """
    Exporte les notes filtr√©es par classe, mati√®re et p√©riode au format Excel.
    Param√®tres GET : classe_id, matiere_id, periode
    """
    classe_id = request.GET.get('classe_id')
    matiere_id = request.GET.get('matiere_id')
    periode = request.GET.get('periode', 'Toutes')

    annee_scolaire = AnneeScolaire.objects.filter(active=True).first()
    if not annee_scolaire:
        messages.error(request, "Aucune ann√©e scolaire active trouv√©e.")
        return redirect('liste_notes_par_classe_matiere')

    response = HttpResponse(
        content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )
    response['Content-Disposition'] = f'attachment; filename="notes_{periode}_{annee_scolaire.annee}.xlsx"'

    workbook = openpyxl.Workbook()
    sheet = workbook.active
    sheet.title = f"Notes {periode}"

    headers = ["MATRICULE", "NOM", "PRENOM", "CLASSE", "MATIERE", "NOTE", "PERIODE", "ANNEE_SCOLAIRE"]
    sheet.append(headers)

    notes = Note.objects.filter(annee_scolaire=annee_scolaire)
    if classe_id:
        notes = notes.filter(etudiant__classe_id=classe_id)
    if matiere_id:
        notes = notes.filter(matiere_id=matiere_id)
    if periode != 'Toutes':
        notes = notes.filter(periode_evaluation=periode)

    notes = notes.select_related('etudiant', 'matiere', 'etudiant__classe').order_by('etudiant__nom', 'etudiant__prenom')

    for note in notes:
        sheet.append([
            note.etudiant.numero_matricule,
            note.etudiant.nom,
            note.etudiant.prenom,
            note.etudiant.classe.nom_classe if note.etudiant.classe else 'N/A',
            note.matiere.nom,
            note.valeur,
            note.periode_evaluation,
            note.annee_scolaire.annee
        ])

    workbook.save(response)
    return response


# ======================================================
# IMPORT DES NOTES DEPUIS EXCEL
# ======================================================
@login_required
def import_notes_excel(request):
    """
    Importation de notes depuis un fichier Excel.
    Les colonnes doivent correspondre √† l'export.
    """
    if request.method == 'POST' and 'file' in request.FILES:
        excel_file = request.FILES['file']

        if not excel_file.name.endswith(('.xlsx', '.xls')):
            messages.error(request, "Veuillez t√©l√©charger un fichier Excel valide (.xlsx ou .xls).")
            return redirect('liste_notes_par_classe_matiere')

        try:
            workbook = openpyxl.load_workbook(excel_file)
            sheet = workbook.active
            rows = list(sheet.iter_rows(min_row=2, values_only=True))

            notes_creees, notes_mises_a_jour, erreurs = 0, 0, []

            annee_active = AnneeScolaire.objects.filter(active=True).first()
            if not annee_active:
                raise Exception("Aucune ann√©e scolaire active n'est d√©finie.")

            for row in rows:
                if not row or not row[0]:
                    continue
                try:
                    matricule, nom, prenom, classe_nom, matiere_nom, valeur, periode, _ = row[:8]
                    etudiant = Etudiant.objects.get(numero_matricule=matricule)
                    matiere = Matiere.objects.get(nom=matiere_nom)
                    note_valeur = float(str(valeur).replace(',', '.'))

                    note_obj, created = Note.objects.update_or_create(
                        etudiant=etudiant,
                        matiere=matiere,
                        periode_evaluation=periode,
                        annee_scolaire=annee_active,
                        defaults={'valeur': note_valeur}
                    )
                    if created:
                        notes_creees += 1
                    else:
                        notes_mises_a_jour += 1
                except Etudiant.DoesNotExist:
                    erreurs.append(f"Matricule introuvable: {matricule}")
                except Matiere.DoesNotExist:
                    erreurs.append(f"Mati√®re introuvable: {matiere_nom}")
                except ValueError:
                    erreurs.append(f"Note invalide pour {matricule} ({valeur})")
                except Exception as e:
                    erreurs.append(f"Erreur inconnue pour {matricule}: {e}")

            if erreurs:
                messages.warning(request, f"Importation termin√©e : {notes_creees} cr√©ations, {notes_mises_a_jour} mises √† jour, {len(erreurs)} erreurs.")
                print("Erreurs d'importation:", erreurs)
            else:
                messages.success(request, f"Importation r√©ussie : {notes_creees} nouvelles notes et {notes_mises_a_jour} mises √† jour.")
        except Exception as e:
            messages.error(request, f"Erreur lors du traitement du fichier : {e}")

    return render(request, 'dashboard/notes/import_notes.html', {'page_title': "Importer des Notes"})


# ======================================================
# CONFIGURATION DE L'√âCOLE
@login_required
def config_ecole_view(request):
    """
    G√©rer la configuration de l'√©cole pour l'utilisateur connect√©.
    Chaque utilisateur ne peut acc√©der qu'√† sa propre √©cole.
    """
    # --- R√©cup√©rer l'√©cole de l'utilisateur ---
    ecole = None
    if hasattr(request.user, 'profile') and request.user.profile.ecole:
        ecole = request.user.profile.ecole
    elif hasattr(request.user, 'enseignant') and request.user.enseignant.ecole:
        ecole = request.user.enseignant.ecole
    elif hasattr(request.user, 'etudiant') and request.user.etudiant.ecole:
        ecole = request.user.etudiant.ecole

    if not ecole:
        messages.error(request, "Vous n'√™tes associ√© √† aucune √©cole.")
        return redirect('dashboard_accueil')

    # --- R√©cup√©rer la configuration existante de l'√©cole ---
    settings = get_object_or_404(EcoleSettings, id=ecole.id)

    # --- Gestion du formulaire POST ---
    if request.method == 'POST':
        form = EcoleSettingsForm(request.POST, request.FILES, instance=settings)
        if form.is_valid():
            form.save()
            messages.success(
                request,
                "Param√®tres de l'√©cole mis √† jour avec succ√®s."
            )
            return redirect('ecole_settings')
        else:
            messages.error(request, "Veuillez corriger les erreurs du formulaire.")
    else:
        form = EcoleSettingsForm(instance=settings)

    # --- Rendu du template ---
    context = {
        'form': form,
        'settings': settings,
        'page_title': "Param√®tres de l'√âcole",
    }
    return render(request, 'dashboard/settings/config_ecole.html', context)

# ======================================================
# CARTE SCOLAIRE (HTML ou PDF)
# ======================================================

@login_required
def carte_scolaire(request, etudiant_id, pdf=False):
    """
    G√©n√®re la carte scolaire d'un √©l√®ve,
    en s'assurant que l'√©l√®ve appartient √† l'√©cole de l'utilisateur connect√©.
    """

    # 1Ô∏è‚É£ Identification de l'√©cole de l'utilisateur connect√©
    ecole_user = getattr(getattr(request.user, "profile", None), "ecole", None)
    if not ecole_user:
        messages.error(request, "‚ö†Ô∏è Vous n'√™tes associ√© √† aucune √©cole.")
        return HttpResponseForbidden("Acc√®s refus√© : aucune √©cole associ√©e √† ce compte.")

    # 2Ô∏è‚É£ R√©cup√©ration s√©curis√©e de l'√©tudiant appartenant √† cette √©cole
    etudiant = get_object_or_404(Etudiant, pk=etudiant_id, ecole=ecole_user)

    # 3Ô∏è‚É£ R√©cup√©ration du contexte scolaire
    ecole = ecole_user
    annee_active = AnneeScolaire.objects.filter(active=True, ecole=ecole).first()
    if not annee_active:
        messages.warning(request, "Aucune ann√©e scolaire active trouv√©e pour votre √©cole.")
    
    # 4Ô∏è‚É£ G√©n√©ration du QR Code (Base64)
    qr_url = request.build_absolute_uri(f"/dashboard/verifier_etudiant/{etudiant.pk}/")
    qr = qrcode.QRCode(box_size=6, border=2)
    qr.add_data(qr_url)
    qr.make(fit=True)
    img_qr = qr.make_image(fill_color="black", back_color="white")
    qr_buffer = io.BytesIO()
    img_qr.save(qr_buffer, format="PNG")
    qr_base64 = "data:image/png;base64," + base64.b64encode(qr_buffer.getvalue()).decode()

    # 5Ô∏è‚É£ Pr√©paration du contexte
    context = {
        "etudiant": etudiant,
        "ecole": ecole,
        "annee_scolaire": etudiant.annee_scolaire_inscription or annee_active,
        "qr_code": qr_base64,
    }

    # 6Ô∏è‚É£ G√©n√©ration PDF (si demand√©)
    if pdf:
        return PDFTemplateResponse(
            request=request,
            template='dashboard/cartes/carte_scolaire.html',
            filename=f'carte_{etudiant.numero_matricule}.pdf',
            context=context,
            show_content_in_browser=True,
            cmd_options={'quiet': True}
        )

    # 7Ô∏è‚É£ Sinon, affichage HTML classique
    return render(request, 'dashboard/cartes/carte_scolaire.html', context)


# ======================================================
# V√âRIFICATION D'√âTUDIANT VIA QR
# ======================================================
@login_required
def verifier_etudiant(request, etudiant_id):
    """
    V√©rifie et affiche les informations d‚Äôun √©l√®ve avec QR code,
    limit√© √† l‚Äô√©cole de l‚Äôutilisateur connect√© (multi-√©cole s√©curis√©).
    """

    # 1Ô∏è‚É£ R√©cup√©ration de l'√©cole associ√©e √† l'utilisateur
    ecole_user = getattr(getattr(request.user, "profile", None), "ecole", None)
    if not ecole_user:
        messages.error(request, "‚ö†Ô∏è Vous n'√™tes associ√© √† aucune √©cole.")
        return render(request, "dashboard/erreurs/acces_refuse.html", status=403)

    # 2Ô∏è‚É£ R√©cup√©ration s√©curis√©e de l'√©l√®ve appartenant √† cette √©cole
    etudiant = get_object_or_404(Etudiant, pk=etudiant_id, ecole=ecole_user)

    # 3Ô∏è‚É£ R√©cup√©ration de l‚Äôann√©e scolaire active de cette √©cole
    annee_active = AnneeScolaire.objects.filter(active=True, ecole=ecole_user).first()
    if not annee_active:
        messages.warning(request, "Aucune ann√©e scolaire active trouv√©e pour votre √©cole.")

    # 4Ô∏è‚É£ G√©n√©ration du QR Code
    qr_url = request.build_absolute_uri()  # L‚ÄôURL actuelle
    qr = qrcode.QRCode(box_size=6, border=2)
    qr.add_data(qr_url)
    qr.make(fit=True)
    img_qr = qr.make_image(fill_color="black", back_color="white")
    qr_buffer = io.BytesIO()
    img_qr.save(qr_buffer, format="PNG")
    qr_base64 = "data:image/png;base64," + base64.b64encode(qr_buffer.getvalue()).decode()

    # 5Ô∏è‚É£ Contexte du template
    context = {
        "etudiant": etudiant,
        "ecole": ecole_user,
        "annee_scolaire": etudiant.annee_scolaire_inscription or annee_active,
        "qr_code": qr_base64,
    }

    return render(request, "dashboard/cartes/carte_scolaire.html", context)